import type { ClarityAbiType, ClarityAbiTypeBuffer, ClarityAbiTypeList, ClarityAbiTypeOptional, ClarityAbiTypePrimitive, ClarityAbiTypeResponse, ClarityAbiTypeStringAscii, ClarityAbiTypeStringUtf8, ClarityAbiTypeTuple } from './abi.js';
import type { Narrow } from './utils.js';
/**
 * Infers embedded primitive type of any type
 * Same as `as const` but without setting the object as readonly and without needing the user to use it.
 *
 * @param value - Value to infer
 * @returns Value with embedded type inferred
 *
 * @example
 * const result = narrow(['foo', 'bar', 1])
 */
export declare function narrow<TType>(value: Narrow<TType>): Narrow<TType>;
export declare const isClarityAbiPrimitive: (val: ClarityAbiType) => val is ClarityAbiTypePrimitive;
export declare const isClarityAbiBuffer: (val: ClarityAbiType) => val is ClarityAbiTypeBuffer;
export declare const isClarityAbiStringAscii: (val: ClarityAbiType) => val is ClarityAbiTypeStringAscii;
export declare const isClarityAbiStringUtf8: (val: ClarityAbiType) => val is ClarityAbiTypeStringUtf8;
export declare const isClarityAbiResponse: (val: ClarityAbiType) => val is ClarityAbiTypeResponse;
export declare const isClarityAbiOptional: (val: ClarityAbiType) => val is ClarityAbiTypeOptional;
export declare const isClarityAbiTuple: (val: ClarityAbiType) => val is ClarityAbiTypeTuple;
export declare const isClarityAbiList: (val: ClarityAbiType) => val is ClarityAbiTypeList;
//# sourceMappingURL=descrimination.d.ts.map