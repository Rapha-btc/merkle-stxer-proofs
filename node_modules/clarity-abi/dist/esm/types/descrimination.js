/**
 * Infers embedded primitive type of any type
 * Same as `as const` but without setting the object as readonly and without needing the user to use it.
 *
 * @param value - Value to infer
 * @returns Value with embedded type inferred
 *
 * @example
 * const result = narrow(['foo', 'bar', 1])
 */
export function narrow(value) {
    return value;
}
export const isClarityAbiPrimitive = (val) => typeof val === 'string';
export const isClarityAbiBuffer = (val) => val.buffer !== undefined;
export const isClarityAbiStringAscii = (val) => val['string-ascii'] !== undefined;
export const isClarityAbiStringUtf8 = (val) => val['string-utf8'] !== undefined;
export const isClarityAbiResponse = (val) => val.response !== undefined;
export const isClarityAbiOptional = (val) => val.optional !== undefined;
export const isClarityAbiTuple = (val) => val.tuple !== undefined;
export const isClarityAbiList = (val) => val.list !== undefined;
//# sourceMappingURL=descrimination.js.map