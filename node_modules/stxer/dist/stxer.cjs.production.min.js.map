{"version":3,"file":"stxer.cjs.production.min.js","sources":["../src/BatchAPI.ts","../src/simulation.ts","../src/clarity-api.ts","../src/BatchProcessor.ts"],"sourcesContent":["/**\n * WARNING:\n *\n * this file will be used in cross-runtime environments (browser, cloudflare workers, XLinkSDK, etc.),\n * so please be careful when adding `import`s to it.\n */\n\nimport {\n  type ClarityValue,\n  type ContractPrincipalCV,\n  deserializeCV,\n  serializeCV,\n} from '@stacks/transactions';\n\nexport interface BatchReads {\n  variables?: {\n    contract: ContractPrincipalCV;\n    variableName: string;\n  }[];\n  maps?: {\n    contract: ContractPrincipalCV;\n    mapName: string;\n    mapKey: ClarityValue;\n  }[];\n  readonly?: {\n    contract: ContractPrincipalCV;\n    functionName: string;\n    functionArgs: ClarityValue[];\n  }[];\n  index_block_hash?: string;\n}\n\nexport interface BatchReadsResult {\n  tip: string;\n  vars: (ClarityValue | Error)[];\n  maps: (ClarityValue | Error)[];\n  readonly: (ClarityValue | Error)[];\n}\n\nexport interface BatchApiOptions {\n  stxerApi?: string;\n}\n\nconst DEFAULT_STXER_API = 'https://api.stxer.xyz';\n\nfunction convertResults(\n  rs: ({ Ok: string } | { Err: string })[],\n): (ClarityValue | Error)[] {\n  const results: (ClarityValue | Error)[] = [];\n  for (const v of rs) {\n    if ('Ok' in v) {\n      results.push(deserializeCV(v.Ok));\n    } else {\n      results.push(new Error(v.Err));\n    }\n  }\n  return results;\n}\n\nexport async function batchRead(\n  reads: BatchReads,\n  options: BatchApiOptions = {}\n): Promise<BatchReadsResult> {\n  const ibh =\n    reads.index_block_hash == null\n      ? undefined\n      : reads.index_block_hash.startsWith('0x')\n        ? reads.index_block_hash.substring(2)\n        : reads.index_block_hash;\n\n  const payload: {\n    tip?: string;\n    vars: string[][];\n    maps: string[][];\n    readonly: string[][];\n  } = { vars: [], maps: [], readonly: [], tip: ibh };\n\n  if (reads.variables != null) {\n    for (const variable of reads.variables) {\n      payload.vars.push([serializeCV(variable.contract), variable.variableName]);\n    }\n  }\n\n  if (reads.maps != null) {\n    for (const map of reads.maps) {\n      payload.maps.push([\n        serializeCV(map.contract),\n        map.mapName,\n        serializeCV(map.mapKey),\n      ]);\n    }\n  }\n\n  if (reads.readonly != null) {\n    for (const ro of reads.readonly) {\n      payload.readonly.push([\n        serializeCV(ro.contract),\n        ro.functionName,\n        ...ro.functionArgs.map(v => serializeCV(v)),\n      ]);\n    }\n  }\n\n  const url = `${options.stxerApi ?? DEFAULT_STXER_API}/sidecar/v2/batch`;\n  const data = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(payload),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  const text = await data.text();\n  if (!text.includes('Ok') && !text.includes('Err')) {\n    throw new Error(\n      `Requesting batch reads failed: ${text}, url: ${url}, payload: ${JSON.stringify(\n        payload,\n      )}`,\n    );\n  }\n\n  const rs = JSON.parse(text) as {\n    tip: string;\n    vars: ({ Ok: string } | { Err: string })[];\n    maps: ({ Ok: string } | { Err: string })[];\n    readonly: ({ Ok: string } | { Err: string })[];\n  };\n\n  return {\n    tip: rs.tip,\n    vars: convertResults(rs.vars),\n    maps: convertResults(rs.maps),\n    readonly: convertResults(rs.readonly),\n  };\n}","import { type AccountDataResponse, getNodeInfo, richFetch } from 'ts-clarity';\nimport type { Block } from '@stacks/stacks-blockchain-api-types';\nimport {\n  STACKS_MAINNET,\n  STACKS_TESTNET,\n  type StacksNetworkName,\n} from '@stacks/network';\nimport {\n  type ClarityValue,\n  ClarityVersion,\n  PostConditionMode,\n  type StacksTransactionWire,\n  bufferCV,\n  contractPrincipalCV,\n  deserializeTransaction,\n  makeUnsignedContractCall,\n  makeUnsignedContractDeploy,\n  makeUnsignedSTXTokenTransfer,\n  serializeCVBytes,\n  stringAsciiCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport { c32addressDecode } from 'c32check';\n\nfunction runTx(tx: StacksTransactionWire) {\n  // type 0: run transaction\n  return tupleCV({ type: uintCV(0), data: bufferCV(tx.serializeBytes()) });\n}\n\nexport interface SimulationEval {\n  contract_id: string;\n  code: string;\n}\n\nexport function runEval({ contract_id, code }: SimulationEval) {\n  const [contract_address, contract_name] = contract_id.split('.');\n  // type 1: eval arbitrary code inside a contract\n  return tupleCV({\n    type: uintCV(1),\n    data: bufferCV(\n      serializeCVBytes(\n        tupleCV({\n          contract: contractPrincipalCV(contract_address, contract_name),\n          code: stringAsciiCV(code),\n        })\n      )\n    ),\n  });\n}\n\nexport async function runSimulation(\n  apiEndpoint: string,\n  block_hash: string,\n  block_height: number,\n  txs: (StacksTransactionWire | SimulationEval)[]\n) {\n  // Convert 'sim-v1' to Uint8Array\n  const header = new TextEncoder().encode('sim-v1');\n  // Create 8 bytes for block height\n  const heightBytes = new Uint8Array(8);\n  // Convert block height to bytes\n  const view = new DataView(heightBytes.buffer);\n  view.setBigUint64(0, BigInt(block_height), false); // false for big-endian\n\n  // Convert block hash to bytes\n  const hashHex = block_hash.startsWith('0x')\n    ? block_hash.substring(2)\n    : block_hash;\n  // Replace non-null assertion with null check\n  const matches = hashHex.match(/.{1,2}/g);\n  if (!matches) {\n    throw new Error('Invalid block hash format');\n  }\n  const hashBytes = new Uint8Array(\n    matches.map((byte) => Number.parseInt(byte, 16))\n  );\n\n  // Convert transactions to bytes\n  const txBytes = txs\n    .map((t) => ('contract_id' in t && 'code' in t ? runEval(t) : runTx(t)))\n    .map((t) => serializeCVBytes(t));\n\n  // Combine all byte arrays\n  const totalLength =\n    header.length +\n    heightBytes.length +\n    hashBytes.length +\n    txBytes.reduce((acc, curr) => acc + curr.length, 0);\n  const body = new Uint8Array(totalLength);\n\n  let offset = 0;\n  body.set(header, offset);\n  offset += header.length;\n  body.set(heightBytes, offset);\n  offset += heightBytes.length;\n  body.set(hashBytes, offset);\n  offset += hashBytes.length;\n  for (const tx of txBytes) {\n    body.set(tx, offset);\n    offset += tx.length;\n  }\n\n  const rs = await fetch(apiEndpoint, {\n    method: 'POST',\n    body,\n  }).then(async (rs) => {\n    const response = await rs.text();\n    if (!response.startsWith('{')) {\n      throw new Error(`failed to submit simulation: ${response}`);\n    }\n    return JSON.parse(response) as { id: string };\n  });\n  return rs.id;\n}\n\ninterface SimulationBuilderOptions {\n  apiEndpoint?: string;\n  stacksNodeAPI?: string;\n  network?: StacksNetworkName | string;\n}\n\nexport class SimulationBuilder {\n  private apiEndpoint: string;\n  private stacksNodeAPI: string;\n  private network: StacksNetworkName | string;\n\n  private constructor(options: SimulationBuilderOptions = {}) {\n    this.network = options.network ?? 'mainnet';\n    const isTestnet = this.network === 'testnet';\n    \n    this.apiEndpoint = options.apiEndpoint ?? \n      (isTestnet ? 'https://testnet-api.stxer.xyz' : 'https://api.stxer.xyz');\n    this.stacksNodeAPI = options.stacksNodeAPI ?? \n      (isTestnet ? 'https://api.testnet.hiro.so' : 'https://api.hiro.so');\n  }\n\n  public static new(options?: SimulationBuilderOptions) {\n    return new SimulationBuilder(options);\n  }\n\n  // biome-ignore lint/style/useNumberNamespace: <explanation>\n  private block = NaN;\n  private sender = '';\n  private steps: (\n    | {\n      // inline simulation\n      simulationId: string;\n    }\n    | {\n      // contract call\n      contract_id: string;\n      function_name: string;\n      function_args?: ClarityValue[];\n      sender: string;\n      fee: number;\n    }\n    | {\n      // contract deploy\n      contract_name: string;\n      source_code: string;\n      deployer: string;\n      fee: number;\n      clarity_version: ClarityVersion;\n    }\n    | {\n      // STX transfer\n      recipient: string;\n      amount: number;\n      sender: string;\n      fee: number;\n    }\n    | SimulationEval\n  )[] = [];\n\n  public useBlockHeight(block: number) {\n    this.block = block;\n    return this;\n  }\n  public withSender(address: string) {\n    this.sender = address;\n    return this;\n  }\n  public inlineSimulation(simulationId: string) {\n    this.steps.push({\n      simulationId,\n    })\n    return this;\n  }\n  public addSTXTransfer(params: {\n    recipient: string;\n    amount: number;\n    sender?: string;\n    fee?: number;\n  }) {\n    if (params.sender == null && this.sender === '') {\n      throw new Error(\n        'Please specify a sender with useSender or adding a sender paramenter'\n      );\n    }\n    this.steps.push({\n      ...params,\n      sender: params.sender ?? this.sender,\n      fee: params.fee ?? 0,\n    });\n    return this;\n  }\n  public addContractCall(params: {\n    contract_id: string;\n    function_name: string;\n    function_args?: ClarityValue[];\n    sender?: string;\n    fee?: number;\n  }) {\n    if (params.sender == null && this.sender === '') {\n      throw new Error(\n        'Please specify a sender with useSender or adding a sender paramenter'\n      );\n    }\n    this.steps.push({\n      ...params,\n      sender: params.sender ?? this.sender,\n      fee: params.fee ?? 0,\n    });\n    return this;\n  }\n  public addContractDeploy(params: {\n    contract_name: string;\n    source_code: string;\n    deployer?: string;\n    fee?: number;\n    clarity_version?: ClarityVersion;\n  }) {\n    if (params.deployer == null && this.sender === '') {\n      throw new Error(\n        'Please specify a deployer with useSender or adding a deployer paramenter'\n      );\n    }\n    this.steps.push({\n      ...params,\n      deployer: params.deployer ?? this.sender,\n      fee: params.fee ?? 0,\n      clarity_version: params.clarity_version ?? ClarityVersion.Clarity3,\n    });\n    return this;\n  }\n  public addEvalCode(inside_contract_id: string, code: string) {\n    this.steps.push({\n      contract_id: inside_contract_id,\n      code,\n    });\n    return this;\n  }\n  public addMapRead(contract_id: string, map: string, key: string) {\n    this.steps.push({\n      contract_id,\n      code: `(map-get ${map} ${key})`,\n    });\n    return this;\n  }\n  public addVarRead(contract_id: string, variable: string) {\n    this.steps.push({\n      contract_id,\n      code: `(var-get ${variable})`,\n    });\n    return this;\n  }\n\n  private async getBlockInfo() {\n    if (Number.isNaN(this.block)) {\n      const { stacks_tip_height } = await getNodeInfo({\n        stacksEndpoint: this.stacksNodeAPI,\n      });\n      this.block = stacks_tip_height;\n    }\n    const info: Block = await richFetch(\n      `${this.stacksNodeAPI}/extended/v1/block/by_height/${this.block}?unanchored=true`\n    ).then((r) => r.json());\n    if (\n      info.height !== this.block ||\n      typeof info.hash !== 'string' ||\n      !info.hash.startsWith('0x')\n    ) {\n      throw new Error(\n        `failed to get block info for block height ${this.block}`\n      );\n    }\n    return {\n      block_height: this.block,\n      block_hash: info.hash.substring(2),\n      index_block_hash: info.index_block_hash.substring(2),\n    };\n  }\n\n  public async run() {\n    console.log(\n      `--------------------------------\nThis product can never exist without your support!\n\nWe receive sponsorship funds with:\nSP212Y5JKN59YP3GYG07K3S8W5SSGE4KH6B5STXER\n\nFeedbacks and feature requests are welcome.\nTo get in touch: contact@stxer.xyz\n--------------------------------`\n    );\n    const block = await this.getBlockInfo();\n    console.log(\n      `Using block height ${block.block_height} hash 0x${block.block_hash} to run simulation.`\n    );\n    const txs: (StacksTransactionWire | SimulationEval)[] = [];\n    const nonce_by_address = new Map<string, number>();\n    const nextNonce = async (sender: string) => {\n      const nonce = nonce_by_address.get(sender);\n      if (nonce == null) {\n        const url = `${this.stacksNodeAPI\n          }/v2/accounts/${sender}?proof=${false}&tip=${block.index_block_hash}`;\n        const account: AccountDataResponse = await richFetch(url).then((r) =>\n          r.json()\n        );\n        nonce_by_address.set(sender, account.nonce + 1);\n        return account.nonce;\n      }\n      nonce_by_address.set(sender, nonce + 1);\n      return nonce;\n    };\n    let network = this.network === 'mainnet' ? STACKS_MAINNET : STACKS_TESTNET;\n    if (this.stacksNodeAPI) {\n      network = {\n        ...network,\n        client: {\n          ...network.client,\n          baseUrl: this.stacksNodeAPI,\n        },\n      };\n    }\n    for (const step of this.steps) {\n      if ('simulationId' in step) {\n        const previousSimulation: {steps: ({tx: string} | {code: string, contract: string})[]} = await fetch(`https://api.stxer.xyz/simulations/${step.simulationId}/request`).then(x => x.json())\n        for (const step of previousSimulation.steps) {\n          if ('tx' in step) {\n            txs.push(deserializeTransaction(step.tx));\n          } else if ('code' in step && 'contract' in step) {\n            txs.push({\n              contract_id: step.contract,\n              code: step.code,\n            });\n          }\n        }\n      } else if ('sender' in step && 'function_name' in step) {\n        const nonce = await nextNonce(step.sender);\n        const [contractAddress, contractName] = step.contract_id.split('.');\n        const tx = await makeUnsignedContractCall({\n          contractAddress,\n          contractName,\n          functionName: step.function_name,\n          functionArgs: step.function_args ?? [],\n          nonce,\n          network,\n          publicKey: '',\n          postConditionMode: PostConditionMode.Allow,\n          fee: step.fee,\n        });\n        tx.auth.spendingCondition.signer = c32addressDecode(step.sender)[1];\n        txs.push(tx);\n      } else if ('sender' in step && 'recipient' in step) {\n        const nonce = await nextNonce(step.sender);\n        const tx = await makeUnsignedSTXTokenTransfer({\n          recipient: step.recipient,\n          amount: step.amount,\n          nonce,\n          network,\n          publicKey: '',\n          fee: step.fee,\n        });\n        tx.auth.spendingCondition.signer = c32addressDecode(step.sender)[1];\n        txs.push(tx);\n      } else if ('deployer' in step) {\n        const nonce = await nextNonce(step.deployer);\n        const tx = await makeUnsignedContractDeploy({\n          contractName: step.contract_name,\n          codeBody: step.source_code,\n          nonce,\n          network,\n          publicKey: '',\n          postConditionMode: PostConditionMode.Allow,\n          fee: step.fee,\n        });\n        tx.auth.spendingCondition.signer = c32addressDecode(step.deployer)[1];\n        txs.push(tx);\n      } else if ('code' in step) {\n        txs.push(step);\n      } else {\n        // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>\n        console.log(`Invalid simulation step:`, step);\n      }\n    }\n    const id = await runSimulation(\n      `${this.apiEndpoint}/simulations`,\n      block.block_hash,\n      block.block_height,\n      txs\n    );\n    console.log(\n      `Simulation will be available at: https://stxer.xyz/simulations/${this.network}/${id}`\n    );\n    return id;\n  }\n\n  public pipe(transform: (builder: SimulationBuilder) => SimulationBuilder): SimulationBuilder {\n    return transform(this);\n  }\n}\n","import {\n  ClarityType,\n  type ClarityValue,\n  type OptionalCV,\n} from '@stacks/transactions';\nimport type {\n  ClarityAbiFunction,\n  ClarityAbiMap,\n  ClarityAbiVariable,\n  TContractPrincipal,\n  TPrincipal,\n} from 'clarity-abi';\nimport { decodeAbi, encodeAbi } from 'ts-clarity';\nimport type {\n  InferReadonlyCallParameterType,\n  InferReadonlyCallResultType,\n  InferMapValueType,\n  InferReadMapParameterType,\n  InferReadVariableParameterType,\n  InferVariableType,\n} from 'ts-clarity';\nimport { BatchProcessor } from './BatchProcessor';\n\n// Shared processor instance with default settings\nconst defaultProcessor = new BatchProcessor({\n  batchDelayMs: 100,\n});\n\nexport type ReadonlyCallRuntimeOptions = {\n  sender?: TPrincipal;\n  contract: TContractPrincipal;\n  stacksEndpoint?: string;\n  indexBlockHash?: string;\n  batchProcessor?: BatchProcessor;\n};\n\nexport type ReadMapRuntimeParameters = {\n  contract: TContractPrincipal;\n  stacksEndpoint?: string;\n  proof?: boolean;\n  indexBlockHash?: string;\n  batchProcessor?: BatchProcessor;\n};\n\nexport type ReadVariableRuntimeParameterType = {\n  contract: TContractPrincipal;\n  stacksEndpoint?: string;\n  proof?: boolean;\n  indexBlockHash?: string;\n  batchProcessor?: BatchProcessor;\n};\n\nexport async function callReadonly<\n  Functions extends readonly ClarityAbiFunction[] | readonly unknown[],\n  FunctionName extends string,\n>(\n  params: InferReadonlyCallParameterType<Functions, FunctionName> &\n    ReadonlyCallRuntimeOptions,\n): Promise<InferReadonlyCallResultType<Functions, FunctionName>> {\n  const processor = params.batchProcessor ?? defaultProcessor;\n  const [deployer, contractName] = params.contract.split('.', 2);\n  const fn = String(params.functionName);\n  \n  const functionDef = (params.abi as readonly ClarityAbiFunction[]).find(\n    (def) => def.name === params.functionName,\n  );\n  if (!functionDef) {\n    throw new Error(`failed to find function definition for ${params.functionName}`);\n  }\n  \n  const argsKV = (params as unknown as { args: Record<string, unknown> }).args;\n  const args: ClarityValue[] = [];\n  for (const argDef of functionDef.args) {\n    args.push(encodeAbi(argDef.type, argsKV[argDef.name]));\n  }\n\n  return new Promise((resolve, reject) => {\n    processor.enqueue({\n      request: {\n        mode: 'readonly',\n        contractAddress: deployer,\n        contractName: contractName,\n        functionName: fn,\n        functionArgs: args,\n      },\n      tip: params.indexBlockHash,\n      resolve: (result: ClarityValue | OptionalCV) => {\n        try {\n          const decoded = decodeAbi(functionDef.outputs.type, result);\n          resolve(decoded as InferReadonlyCallResultType<Functions, FunctionName>);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      reject,\n    });\n  });\n}\n\nexport async function readMap<\n  Maps extends readonly ClarityAbiMap[] | readonly unknown[] = readonly ClarityAbiMap[],\n  MapName extends string = string,\n>(\n  params: InferReadMapParameterType<Maps, MapName> & ReadMapRuntimeParameters,\n): Promise<InferMapValueType<Maps, MapName> | null> {\n  const processor = params.batchProcessor ?? defaultProcessor;\n  const [deployer, contractName] = params.contract.split('.', 2);\n  \n  const mapDef = (params.abi as readonly ClarityAbiMap[]).find(\n    (m) => m.name === params.mapName,\n  );\n  if (!mapDef) {\n    throw new Error(`failed to find map definition for ${params.mapName}`);\n  }\n  \n  const key: ClarityValue = encodeAbi(mapDef.key, params.key);\n\n  return new Promise((resolve, reject) => {\n    processor.enqueue({\n      request: {\n        mode: 'mapEntry',\n        contractAddress: deployer,\n        contractName: contractName,\n        mapName: params.mapName,\n        mapKey: key,\n      },\n      tip: params.indexBlockHash,\n      resolve: (result: ClarityValue | OptionalCV) => {\n        try {\n          if (result.type === ClarityType.OptionalNone) {\n            resolve(null);\n            return;\n          }\n          if (result.type !== ClarityType.OptionalSome) {\n            throw new Error(`unexpected map value: ${result}`);\n          }\n          const someCV = result as { type: ClarityType.OptionalSome; value: ClarityValue };\n          const decoded = decodeAbi(mapDef.value, someCV.value);\n          resolve(decoded as InferMapValueType<Maps, MapName>);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      reject,\n    });\n  });\n}\n\nexport async function readVariable<\n  Variables extends readonly ClarityAbiVariable[] | readonly unknown[] = readonly ClarityAbiVariable[],\n  VariableName extends string = string,\n>(\n  params: InferReadVariableParameterType<Variables, VariableName> &\n    ReadVariableRuntimeParameterType,\n): Promise<InferVariableType<Variables, VariableName>> {\n  const processor = params.batchProcessor ?? defaultProcessor;\n  const [deployer, contractName] = params.contract.split('.', 2);\n  \n  const varDef = (params.abi as readonly ClarityAbiVariable[]).find(\n    (def) => def.name === params.variableName,\n  );\n  if (!varDef) {\n    throw new Error(`failed to find variable definition for ${params.variableName}`);\n  }\n\n  return new Promise((resolve, reject) => {\n    processor.enqueue({\n      request: {\n        mode: 'variable',\n        contractAddress: deployer,\n        contractName: contractName,\n        variableName: params.variableName,\n      },\n      tip: params.indexBlockHash,\n      resolve: (result: ClarityValue | OptionalCV) => {\n        try {\n          const decoded = decodeAbi(varDef.type, result);\n          resolve(decoded as InferVariableType<Variables, VariableName>);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      reject,\n    });\n  });\n}","/**\n * WARNING:\n *\n * this file will be used in cross-runtime environments (browser, cloudflare workers, XLinkSDK, etc.),\n * so please be careful when adding `import`s to it.\n */\n\nimport {\n  type ClarityValue,\n  type OptionalCV,\n  contractPrincipalCV,\n} from '@stacks/transactions';\nimport { type BatchReads, batchRead } from './BatchAPI';\n\nexport interface ReadOnlyRequest {\n  mode: 'readonly';\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n}\n\nexport interface MapEntryRequest {\n  mode: 'mapEntry';\n  contractAddress: string;\n  contractName: string;\n  mapName: string;\n  mapKey: ClarityValue;\n}\n\nexport interface VariableRequest {\n  mode: 'variable';\n  contractAddress: string;\n  contractName: string;\n  variableName: string;\n}\n\nexport type BatchRequest = MapEntryRequest | VariableRequest | ReadOnlyRequest;\n\nexport interface QueuedRequest {\n  request: BatchRequest;\n  tip?: string;\n  resolve: (value: ClarityValue | OptionalCV) => void;\n  reject: (error: Error) => void;\n}\n\nexport class BatchProcessor {\n  private queues = new Map<string, QueuedRequest[]>();\n  private timeoutIds = new Map<string, ReturnType<typeof setTimeout>>();\n\n  private readonly stxerAPIEndpoint: string;\n  private readonly batchDelayMs: number;\n\n  constructor(options: { stxerAPIEndpoint?: string; batchDelayMs: number }) {\n    this.stxerAPIEndpoint = options.stxerAPIEndpoint ?? 'https://api.stxer.xyz';\n    this.batchDelayMs = options.batchDelayMs;\n  }\n\n  private getQueueKey(tip?: string): string {\n    return tip ?? '_undefined';\n  }\n\n  read(request: BatchRequest): Promise<ClarityValue | OptionalCV> {\n    return new Promise((resolve, reject) => {\n      this.enqueue({ request, resolve, reject });\n    });\n  }\n\n  enqueue(request: QueuedRequest): void {\n    const queueKey = this.getQueueKey(request.tip);\n\n    const queue = this.queues.get(queueKey) ?? [];\n    if (!this.queues.has(queueKey)) {\n      this.queues.set(queueKey, queue);\n    }\n    queue.push(request);\n\n    if (!this.timeoutIds.has(queueKey)) {\n      const timeoutId = setTimeout(\n        () => this.processBatch(queueKey),\n        this.batchDelayMs,\n      );\n      this.timeoutIds.set(queueKey, timeoutId);\n    }\n  }\n\n  private async processBatch(queueKey: string): Promise<void> {\n    const currentQueue = this.queues.get(queueKey) ?? [];\n    this.queues.delete(queueKey);\n\n    const timeoutId = this.timeoutIds.get(queueKey);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      this.timeoutIds.delete(queueKey);\n    }\n\n    if (currentQueue.length === 0) return;\n\n    try {\n      const readonlyRequests = currentQueue.filter(\n        (q): q is QueuedRequest & { request: ReadOnlyRequest } =>\n          q.request.mode === 'readonly',\n      );\n      const mapRequests = currentQueue.filter(\n        (q): q is QueuedRequest & { request: MapEntryRequest } =>\n          q.request.mode === 'mapEntry',\n      );\n      const variableRequests = currentQueue.filter(\n        (q): q is QueuedRequest & { request: VariableRequest } =>\n          q.request.mode === 'variable',\n      );\n\n      const tip = queueKey === '_undefined' ? undefined : queueKey;\n\n      const batchRequest: BatchReads = {\n        readonly: readonlyRequests.map(({ request }) => ({\n          contract: contractPrincipalCV(\n            request.contractAddress,\n            request.contractName,\n          ),\n          functionName: request.functionName,\n          functionArgs: request.functionArgs,\n        })),\n        maps: mapRequests.map(({ request }) => ({\n          contract: contractPrincipalCV(\n            request.contractAddress,\n            request.contractName,\n          ),\n          mapName: request.mapName,\n          mapKey: request.mapKey,\n        })),\n        variables: variableRequests.map(({ request }) => ({\n          contract: contractPrincipalCV(\n            request.contractAddress,\n            request.contractName,\n          ),\n          variableName: request.variableName,\n        })),\n        index_block_hash: tip,\n      };\n\n      const results = await batchRead(batchRequest, {\n        stxerApi: this.stxerAPIEndpoint,\n      });\n\n      // Handle readonly results\n      for (const [index, result] of results.readonly.entries()) {\n        if (result instanceof Error) {\n          readonlyRequests[index].reject(result);\n        } else {\n          readonlyRequests[index].resolve(result);\n        }\n      }\n\n      // Handle variable results\n      for (const [index, result] of results.vars.entries()) {\n        if (result instanceof Error) {\n          variableRequests[index].reject(result);\n        } else {\n          variableRequests[index].resolve(result);\n        }\n      }\n\n      // Handle map results\n      for (const [index, result] of results.maps.entries()) {\n        if (result instanceof Error) {\n          mapRequests[index].reject(result);\n        } else {\n          mapRequests[index].resolve(result);\n        }\n      }\n    } catch (error) {\n      for (const item of currentQueue) {\n        item.reject(error as Error);\n      }\n    }\n  }\n} "],"names":["convertResults","rs","_step","results","_iterator","_createForOfIteratorHelperLoose","done","v","value","push","deserializeCV","Ok","Error","Err","batchRead","_x","_x2","_batchRead","apply","this","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reads","options","ibh","index_block_hash","undefined","startsWith","substring","payload","vars","maps","readonly","tip","variables","_iterator2","_step2","serializeCV","variable","contract","variableName","_iterator3","_step3","map","mapName","mapKey","_iterator4","_step4","ro","functionName","concat","functionArgs","url","_options$stxerApi","stxerApi","_context","next","fetch","method","body","JSON","stringify","headers","data","sent","text","includes","parse","abrupt","stop","runTx","tx","tupleCV","type","uintCV","bufferCV","serializeBytes","runEval","_ref","code","_contract_id$split","contract_id","split","contract_address","contract_name","serializeCVBytes","contractPrincipalCV","stringAsciiCV","runSimulation","_x3","_x4","_runSimulation","_callee5","apiEndpoint","block_hash","block_height","txs","header","heightBytes","hashHex","matches","hashBytes","txBytes","totalLength","offset","wrap","_context5","prev","TextEncoder","encode","Uint8Array","DataView","buffer","setBigUint64","BigInt","match","byte","Number","parseInt","t","length","reduce","acc","curr","set","then","_ref3","_callee4","response","_context4","_x6","id","SimulationBuilder","_options$network","_options$apiEndpoint","_options$stacksNodeAP","stacksNodeAPI","network","block","NaN","sender","steps","isTestnet","_proto","prototype","useBlockHeight","withSender","address","inlineSimulation","simulationId","addSTXTransfer","params","_params$sender","_params$fee","_extends","fee","addContractCall","_params$sender2","_params$fee2","addContractDeploy","_params$deployer","_params$fee3","_params$clarity_versi","deployer","clarity_version","ClarityVersion","Clarity3","addEvalCode","inside_contract_id","addMapRead","key","addVarRead","getBlockInfo","_getBlockInfo","info","isNaN","getNodeInfo","stacksEndpoint","stacks_tip_height","richFetch","r","json","height","hash","run","_run","_callee3","nonce_by_address","nextNonce","step","_step$function_args","nonce","_step$contract_id$spl","contractAddress","contractName","_nonce","_tx","_nonce2","_tx2","_this","_context3","console","log","Map","_ref2","_callee2","account","_context2","get","_x5","STACKS_MAINNET","STACKS_TESTNET","client","baseUrl","x","deserializeTransaction","makeUnsignedContractCall","function_name","function_args","publicKey","postConditionMode","PostConditionMode","Allow","auth","spendingCondition","signer","c32addressDecode","makeUnsignedSTXTokenTransfer","recipient","amount","makeUnsignedContractDeploy","codeBody","source_code","pipe","transform","defaultProcessor","BatchProcessor","_options$stxerAPIEndp","queues","timeoutIds","stxerAPIEndpoint","batchDelayMs","getQueueKey","read","request","Promise","resolve","reject","enqueue","_this$queues$get","_this2","queueKey","queue","has","timeoutId","setTimeout","processBatch","_processBatch","_this$queues$get2","currentQueue","readonlyRequests","mapRequests","variableRequests","batchRequest","_step$value","index","result","_step2$value","_index","_result","_step3$value","_index2","_result2","clearTimeout","filter","q","mode","entries","t0","_callReadonly","_params$batchProcesso","processor","_params$contract$spli","fn","functionDef","argsKV","args","argDef","batchProcessor","String","abi","find","def","name","encodeAbi","indexBlockHash","decoded","decodeAbi","outputs","error","_readMap","_params$batchProcesso2","_params$contract$spli2","mapDef","m","ClarityType","OptionalNone","OptionalSome","_readVariable","_params$batchProcesso3","_params$contract$spli3","varDef","callReadonly","readMap","readVariable"],"mappings":"i1PA6CA,SAASA,EACPC,GAGA,IADA,IACkBC,EADZC,EAAoC,GAC1CC,EAAAC,EAAgBJ,KAAEC,EAAAE,KAAAE,MAAE,CAAA,IAATC,EAACL,EAAAM,MAERL,EAAQM,KADN,OAAQF,EACGG,EAAAA,cAAcH,EAAEI,IAEhB,IAAIC,MAAML,EAAEM,KAE7B,CACA,OAAOV,CACT,CAEA,SAAsBW,EAASC,EAAAC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,UAAA,CA2E9B,SAAAH,IAAA,OAAAA,EAAAI,EAAAC,IAAAC,MA3EM,SAAAC,EACLC,EACAC,wGAgBA,YAhBAA,IAAAA,EAA2B,CAAA,GAErBC,EACsB,MAA1BF,EAAMG,sBACFC,EACAJ,EAAMG,iBAAiBE,WAAW,MAChCL,EAAMG,iBAAiBG,UAAU,GACjCN,EAAMG,iBAERI,EAKF,CAAEC,KAAM,GAAIC,KAAM,GAAIC,SAAU,GAAIC,IAAKT,GAEtB,MAAnBF,EAAMY,UACR,IAAAC,EAAAjC,EAAuBoB,EAAMY,aAASE,EAAAD,KAAAhC,MACpC0B,EAAQC,KAAKxB,KAAK,CAAC+B,EAAWA,aADrBC,EAAQF,EAAA/B,OACuBkC,UAAWD,EAASE,eAIhE,GAAkB,MAAdlB,EAAMS,KACR,IAAAU,EAAAvC,EAAkBoB,EAAMS,QAAIW,EAAAD,KAAAtC,MAC1B0B,EAAQE,KAAKzB,KAAK,CAChB+B,EAAWA,aAFJM,EAAGD,EAAArC,OAEMkC,UAChBI,EAAIC,QACJP,EAAWA,YAACM,EAAIE,UAKtB,GAAsB,MAAlBvB,EAAMU,SACR,IAAAc,EAAA5C,EAAiBoB,EAAMU,YAAQe,EAAAD,KAAA3C,MAC7B0B,EAAQG,SAAS1B,KAAI,CACnB+B,EAAAA,aAFOW,EAAED,EAAA1C,OAEMkC,UACfS,EAAGC,cAAYC,OACZF,EAAGG,aAAaR,KAAI,SAAAvC,GAAC,OAAIiC,EAAAA,YAAYjC,EAAE,MAKI,OAA9CgD,GAAyB,OAAtBC,EAAM9B,EAAQ+B,UAAQD,EA5DP,yBA4D4B,oBAAAE,EAAAC,KAAA,EACjCC,MAAML,EAAK,CAC5BM,OAAQ,OACRC,KAAMC,KAAKC,UAAUhC,GACrBiC,QAAS,CACP,eAAgB,sBAElB,KAAA,EANQ,OAAJC,EAAIR,EAAAS,KAAAT,EAAAC,KAAA,GAQSO,EAAKE,OAAM,KAAA,GAApB,IAAJA,EAAIV,EAAAS,MACAE,SAAS,OAAUD,EAAKC,SAAS,OAAM,CAAAX,EAAAC,KAAA,GAAA,KAAA,CAAA,MACzC,IAAI/C,MAC0BwD,kCAAAA,EAAcb,UAAAA,EAAiBQ,cAAAA,KAAKC,UACpEhC,IAEH,KAAA,GAQF,OALK/B,EAAK8D,KAAKO,MAAMF,GAKrBV,EAAAa,OAEM,SAAA,CACLnC,IAAKnC,EAAGmC,IACRH,KAAMjC,EAAeC,EAAGgC,MACxBC,KAAMlC,EAAeC,EAAGiC,MACxBC,SAAUnC,EAAeC,EAAGkC,YAC7B,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAc,OAAA,GAAAhD,EACF,MAAAN,MAAAC,KAAAC,UAAA,CC7GD,SAASqD,EAAMC,GAEb,OAAOC,UAAQ,CAAEC,KAAMC,EAAMA,OAAC,GAAIX,KAAMY,EAAQA,SAACJ,EAAGK,mBACtD,UAOgBC,EAAOC,GAAsC,IAAtBC,EAAID,EAAJC,KACrCC,EADmCF,EAAXG,YAC8BC,MAAM,KAArDC,EAAgBH,EAAA,GAAEI,EAAaJ,EAAA,GAEtC,OAAOR,UAAQ,CACbC,KAAMC,EAAMA,OAAC,GACbX,KAAMY,EAAAA,SACJU,EAAgBA,iBACdb,UAAQ,CACNjC,SAAU+C,EAAAA,oBAAoBH,EAAkBC,GAChDL,KAAMQ,EAAaA,cAACR,QAK9B,CAEsBS,SAAAA,EAAa5E,EAAAC,EAAA4E,EAAAC,GAAA,OAAAC,EAAA5E,MAAAC,KAAAC,UAAA,CA+DlC,SAAA0E,IAAA,OAAAA,EAAAzE,EAAAC,IAAAC,MA/DM,SAAAwE,EACLC,EACAC,EACAC,EACAC,GAA+C,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5C,EAAA6C,EAAA/D,EAAAM,EAAAwB,EAAA,OAAApD,IAAAsF,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAlD,MAAA,KAAA,EAeP,GAZlCyC,GAAS,IAAIW,aAAcC,OAAO,UAElCX,EAAc,IAAIY,WAAW,GAEtB,IAAIC,SAASb,EAAYc,QACjCC,aAAa,EAAGC,OAAOnB,IAAe,GAGrCI,EAAUL,EAAWnE,WAAW,MAClCmE,EAAWlE,UAAU,GACrBkE,EAEEM,EAAUD,EAAQgB,MAAM,WAClB,CAAAT,EAAAlD,KAAA,EAAA,KAAA,CAAA,MACJ,IAAI/C,MAAM,6BAA4B,KAAA,EA0B9C,IAxBM4F,EAAY,IAAIS,WACpBV,EAAQzD,KAAI,SAACyE,GAAI,OAAKC,OAAOC,SAASF,EAAM,GAAG,KAI3Cd,EAAUN,EACbrD,KAAI,SAAC4E,GAAC,MAAM,gBAAiBA,GAAK,SAAUA,EAAI1C,EAAQ0C,GAAKjD,EAAMiD,EAAE,IACrE5E,KAAI,SAAC4E,GAAC,OAAKlC,EAAAA,iBAAiBkC,EAAE,IAG3BhB,EACJN,EAAOuB,OACPtB,EAAYsB,OACZnB,EAAUmB,OACVlB,EAAQmB,QAAO,SAACC,EAAKC,GAAI,OAAKD,EAAMC,EAAKH,MAAM,GAAE,IAC7C7D,EAAO,IAAImD,WAAWP,IAGvBqB,IAAI3B,EADLO,EAAS,GAGb7C,EAAKiE,IAAI1B,EADTM,GAAUP,EAAOuB,QAGjB7D,EAAKiE,IAAIvB,EADTG,GAAUN,EAAYsB,QAEtBhB,GAAUH,EAAUmB,OACpB/E,EAAAvC,EAAiBoG,KAAOvD,EAAAN,KAAAtC,MACtBwD,EAAKiE,IADIrD,EAAExB,EAAA1C,MACEmG,GACbA,GAAUjC,EAAGiD,OACd,OAAAd,EAAAlD,KAAA,GAEgBC,MAAMoC,EAAa,CAClCnC,OAAQ,OACRC,KAAAA,IACCkE,KAAI,WAAA,IAAAC,EAAA5G,EAAAC,IAAAC,MAAC,SAAA2G,EAAOjI,GAAE,IAAAkI,EAAA,OAAA7G,IAAAsF,MAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAAzE,MAAA,KAAA,EAAA,OAAAyE,EAAAzE,KAAA,EACQ1D,EAAGmE,OAAM,KAAA,EAAlB,IAAR+D,EAAQC,EAAAjE,MACArC,WAAW,KAAI,CAAAsG,EAAAzE,KAAA,EAAA,KAAA,CAAA,MACrB,IAAI/C,MAAsCuH,gCAAAA,GAAW,KAAA,EAAA,OAAAC,EAAA7D,OAAA,SAEtDR,KAAKO,MAAM6D,IAA2B,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAA5D,OAAA,GAAA0D,EAC9C,KAAA,OAAA,SAAAG,GAAA,OAAAJ,EAAA/G,MAAAC,KAAAC,UAAA,CAAC,CANK,IAML,KAAA,GATM,OAAAyF,EAAAtC,OAUDtE,SAVC4G,EAAA1C,KAUEmE,IAAE,KAAA,GAAA,IAAA,MAAA,OAAAzB,EAAArC,OAAA,GAAAuB,EACb,KAAAD,EAAA5E,MAAAC,KAAAC,UAAA,CAQD,IAAamH,EAAiB,WAK5B,SAAAA,EAAoB7G,GAAsC,IAAA8G,EAAAC,EAAAC,WAAtChH,IAAAA,EAAoC,CAAA,GAAEP,KAJlD6E,iBAAW,EAAA7E,KACXwH,mBAAa,EAAAxH,KACbyH,aAAO,EAgBfzH,KACQ0H,MAAQC,IAAG3H,KACX4H,OAAS,GAAE5H,KACX6H,MA6BF,GA7CJ7H,KAAKyH,QAAyB,OAAlBJ,EAAG9G,EAAQkH,SAAOJ,EAAI,UAClC,IAAMS,EAA6B,YAAjB9H,KAAKyH,QAEvBzH,KAAK6E,YAAiC,OAAtByC,EAAG/G,EAAQsE,aAAWyC,EACnCQ,EAAY,gCAAkC,wBACjD9H,KAAKwH,cAAqC,OAAxBD,EAAGhH,EAAQiH,eAAaD,EACvCO,EAAY,8BAAgC,qBACjD,CAACV,EAEM,IAAA,SAAW7G,GAChB,OAAO,IAAI6G,EAAkB7G,IAC9B,IAAAwH,EAAAX,EAAAY,UAgRA,OAhRAD,EAoCME,eAAA,SAAeP,GAEpB,OADA1H,KAAK0H,MAAQA,EACN1H,MACR+H,EACMG,WAAA,SAAWC,GAEhB,OADAnI,KAAK4H,OAASO,EACPnI,MACR+H,EACMK,iBAAA,SAAiBC,GAItB,OAHArI,KAAK6H,MAAMvI,KAAK,CACd+I,aAAAA,IAEKrI,MACR+H,EACMO,eAAA,SAAeC,GAKrB,IAAAC,EAAAC,EACC,GAAqB,MAAjBF,EAAOX,QAAkC,KAAhB5H,KAAK4H,OAChC,MAAM,IAAInI,MACR,wEAQJ,OALAO,KAAK6H,MAAMvI,KAAIoJ,KACVH,EAAM,CACTX,OAAqB,OAAfY,EAAED,EAAOX,QAAMY,EAAIxI,KAAK4H,OAC9Be,IAAe,OAAZF,EAAEF,EAAOI,KAAGF,EAAI,KAEdzI,MACR+H,EACMa,gBAAA,SAAgBL,GAMtB,IAAAM,EAAAC,EACC,GAAqB,MAAjBP,EAAOX,QAAkC,KAAhB5H,KAAK4H,OAChC,MAAM,IAAInI,MACR,wEAQJ,OALAO,KAAK6H,MAAMvI,KAAIoJ,KACVH,EAAM,CACTX,OAAqB,OAAfiB,EAAEN,EAAOX,QAAMiB,EAAI7I,KAAK4H,OAC9Be,IAAe,OAAZG,EAAEP,EAAOI,KAAGG,EAAI,KAEd9I,MACR+H,EACMgB,kBAAA,SAAkBR,GAMxB,IAAAS,EAAAC,EAAAC,EACC,GAAuB,MAAnBX,EAAOY,UAAoC,KAAhBnJ,KAAK4H,OAClC,MAAM,IAAInI,MACR,4EASJ,OANAO,KAAK6H,MAAMvI,KAAIoJ,KACVH,EAAM,CACTY,SAAyB,OAAjBH,EAAET,EAAOY,UAAQH,EAAIhJ,KAAK4H,OAClCe,IAAe,OAAZM,EAAEV,EAAOI,KAAGM,EAAI,EACnBG,gBAAuCF,OAAxBA,EAAEX,EAAOa,iBAAeF,EAAIG,EAAAA,eAAeC,YAErDtJ,MACR+H,EACMwB,YAAA,SAAYC,EAA4BzF,GAK7C,OAJA/D,KAAK6H,MAAMvI,KAAK,CACd2E,YAAauF,EACbzF,KAAAA,IAEK/D,MACR+H,EACM0B,WAAA,SAAWxF,EAAqBtC,EAAa+H,GAKlD,OAJA1J,KAAK6H,MAAMvI,KAAK,CACd2E,YAAAA,EACAF,KAAI,YAAcpC,EAAG,IAAI+H,EAAG,MAEvB1J,MACR+H,EACM4B,WAAA,SAAW1F,EAAqB3C,GAKrC,OAJAtB,KAAK6H,MAAMvI,KAAK,CACd2E,YAAAA,EACAF,iBAAkBzC,EAAQ,MAErBtB,MACR+H,EAEa6B,aAAY,WAAA,IAAAC,EAAA3J,EAAAC,IAAAC,MAAlB,SAAAC,IAAA,IAAAyJ,EAAA,OAAA3J,IAAAsF,MAAA,SAAAlD,GAAA,cAAAA,EAAAoD,KAAApD,EAAAC,MAAA,KAAA,EAAA,IACF6D,OAAO0D,MAAM/J,KAAK0H,OAAM,CAAAnF,EAAAC,KAAA,EAAA,KAAA,CAAA,OAAAD,EAAAC,KAAA,EACUwH,cAAY,CAC9CC,eAAgBjK,KAAKwH,gBACrB,KAAA,EACFxH,KAAK0H,MADHnF,EAAAS,KAFMkH,kBAGuB,KAAA,EAAA,OAAA3H,EAAAC,KAAA,EAEP2H,YACrBnK,KAAKwH,cAA6C,gCAAAxH,KAAK0H,0BAC1Db,MAAK,SAACuD,GAAC,OAAKA,EAAEC,UAAO,KAAA,EAFb,IAAJP,EAAIvH,EAAAS,MAIHsH,SAAWtK,KAAK0H,OACA,iBAAdoC,EAAKS,MACXT,EAAKS,KAAK5J,WAAW,MAAK,CAAA4B,EAAAC,KAAA,GAAA,KAAA,CAAA,MAErB,IAAI/C,MAAK,6CACgCO,KAAK0H,OACnD,KAAA,GAAA,OAAAnF,EAAAa,OAEI,SAAA,CACL2B,aAAc/E,KAAK0H,MACnB5C,WAAYgF,EAAKS,KAAK3J,UAAU,GAChCH,iBAAkBqJ,EAAKrJ,iBAAiBG,UAAU,KACnD,KAAA,GAAA,IAAA,MAAA,OAAA2B,EAAAc,OAAA,GAAAhD,EAAAL,KACF,KAxByB,OAwBzB,WAxByB,OAAA6J,EAAA9J,MAAAC,KAAAC,UAAA,CAAA,CAAA,GAAA8H,EA0BbyC,IAAG,WAAA,IAAAC,EAAAvK,EAAAC,IAAAC,MAAT,SAAAsK,IAAA,IAAAhD,EAAA1C,EAAA2F,EAAAC,EAAAnD,EAAAxI,EAAAF,EAAA8L,EAAA1J,EAAAC,EAAAM,EAAAoJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3H,EAAA4H,EAAAC,EAAAC,EAAAC,EAAAnE,EAAAoE,EAAAvL,KAAA,OAAAG,IAAAsF,MAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAAhJ,MAAA,KAAA,EAWH,OAVFiJ,QAAQC,IAAG,8RAUTF,EAAAhJ,KAAA,EACkBxC,KAAK4J,eAAc,KAAA,EAAjClC,EAAK8D,EAAAxI,KACXyI,QAAQC,IAAG,sBACahE,EAAM3C,aAAY,WAAW2C,EAAM5C,WAAU,uBAE/DE,EAAkD,GAClD2F,EAAmB,IAAIgB,IACvBf,EAAS,WAAA,IAAAgB,EAAA1L,EAAAC,IAAAC,MAAG,SAAAyL,EAAOjE,GAAc,IAAAmD,EAAA3I,EAAA0J,EAAA,OAAA3L,IAAAsF,MAAA,SAAAsG,GAAA,cAAAA,EAAApG,KAAAoG,EAAAvJ,MAAA,KAAA,EACK,GAC7B,OADPuI,EAAQJ,EAAiBqB,IAAIpE,IAClB,CAAAmE,EAAAvJ,KAAA,EAAA,KAAA,CAEsD,OAD/DJ,EAASmJ,EAAK/D,cAClB,gBAAgBI,EAAM,WAAU,EAAK,QAAQF,EAAMjH,iBAAgBsL,EAAAvJ,KAAA,EAC1B2H,EAASA,UAAC/H,GAAKyE,MAAK,SAACuD,GAAC,OAC/DA,EAAEC,UACH,KAAA,EAC+C,OAAhDM,EAAiB/D,IAAIgB,GAHfkE,EAAOC,EAAA/I,MAGwB+H,MAAQ,GAAGgB,EAAA3I,OACzC0I,SAAAA,EAAQf,OAAK,KAAA,EAEkB,OAAxCJ,EAAiB/D,IAAIgB,EAAQmD,EAAQ,GAAGgB,EAAA3I,OAAA,SACjC2H,GAAK,KAAA,GAAA,IAAA,MAAA,OAAAgB,EAAA1I,OAAA,GAAAwI,EACb,KAAA,OAbKjB,SAASqB,GAAA,OAAAL,EAAA7L,MAAAC,KAAAC,UAAA,CAAA,CAAA,GAcXwH,EAA2B,YAAjBzH,KAAKyH,QAAwByE,EAAAA,eAAiBC,EAAAA,eACxDnM,KAAKwH,gBACPC,EAAOiB,EAAA,CAAA,EACFjB,EAAO,CACV2E,OAAM1D,EACDjB,GAAAA,EAAQ2E,OAAM,CACjBC,QAASrM,KAAKwH,mBAGnBvI,EAAAC,EACkBc,KAAK6H,OAAK,KAAA,GAAA,IAAA9I,EAAAE,KAAAE,KAAA,CAAAqM,EAAAhJ,KAAA,GAAA,KAAA,CAAd,KACT,iBADKqI,EAAI9L,EAAAM,QACa,CAAAmM,EAAAhJ,KAAA,GAAA,KAAA,CAAA,OAAAgJ,EAAAhJ,KAAA,GACuEC,MAA2CoI,qCAAAA,EAAKxC,aAAsB,YAAExB,MAAK,SAAAyF,GAAC,OAAIA,EAAEjC,UAAO,KAAA,GAC1L,IAAAlJ,EAAAjC,EADwBsM,EAAAxI,KACc6E,SAAKzG,EAAAD,KAAAhC,MACrC,OADK0L,EAAIzJ,EAAA/B,OAEX2F,EAAI1F,KAAKiN,EAAAA,uBAAuB1B,EAAKtH,KAC5B,SAAUsH,GAAQ,aAAcA,GACzC7F,EAAI1F,KAAK,CACP2E,YAAa4G,EAAKtJ,SAClBwC,KAAM8G,EAAK9G,OAGhByH,EAAAhJ,KAAA,GAAA,MAAA,KAAA,GAAA,KACQ,WAAYqI,MAAQ,kBAAmBA,GAAI,CAAAW,EAAAhJ,KAAA,GAAA,KAAA,CAAA,OAAAgJ,EAAAhJ,KAAA,GAChCoI,EAAUC,EAAKjD,QAAO,KAAA,GACN,OAD9BmD,EAAKS,EAAAxI,KAAAgI,EAC6BH,EAAK5G,YAAYC,MAAM,KAAxD+G,EAAeD,EAAEE,GAAAA,EAAYF,EAAA,GAAAQ,EAAAhJ,KAAA,GACnBgK,2BAAyB,CACxCvB,gBAAAA,EACAC,aAAAA,EACAjJ,aAAc4I,EAAK4B,cACnBtK,aAAgC,OAApB2I,EAAED,EAAK6B,eAAa5B,EAAI,GACpCC,MAAAA,EACAtD,QAAAA,EACAkF,UAAW,GACXC,kBAAmBC,EAAiBA,kBAACC,MACrCnE,IAAKkC,EAAKlC,MACV,KAAA,IAVIpF,EAAEiI,EAAAxI,MAWL+J,KAAKC,kBAAkBC,OAASC,EAAgBA,iBAACrC,EAAKjD,QAAQ,GACjE5C,EAAI1F,KAAKiE,GAAIiI,EAAAhJ,KAAA,GAAA,MAAA,KAAA,GAAA,KACJ,WAAYqI,MAAQ,cAAeA,GAAI,CAAAW,EAAAhJ,KAAA,GAAA,KAAA,CAAA,OAAAgJ,EAAAhJ,KAAA,GAC5BoI,EAAUC,EAAKjD,QAAO,KAAA,GAA/B,OAALmD,EAAKS,EAAAxI,KAAAwI,EAAAhJ,KAAA,GACM2K,+BAA6B,CAC5CC,UAAWvC,EAAKuC,UAChBC,OAAQxC,EAAKwC,OACbtC,MAAAA,EACAtD,QAAAA,EACAkF,UAAW,GACXhE,IAAKkC,EAAKlC,MACV,KAAA,IAPIpF,EAAEiI,EAAAxI,MAQL+J,KAAKC,kBAAkBC,OAASC,EAAgBA,iBAACrC,EAAKjD,QAAQ,GACjE5C,EAAI1F,KAAKiE,GAAIiI,EAAAhJ,KAAA,GAAA,MAAA,KAAA,GAAA,KACJ,aAAcqI,GAAI,CAAAW,EAAAhJ,KAAA,GAAA,KAAA,CAAA,OAAAgJ,EAAAhJ,KAAA,GACPoI,EAAUC,EAAK1B,UAAS,KAAA,GAAjC,OAAL4B,EAAKS,EAAAxI,KAAAwI,EAAAhJ,KAAA,GACM8K,6BAA2B,CAC1CpC,aAAcL,EAAKzG,cACnBmJ,SAAU1C,EAAK2C,YACfzC,MAAAA,EACAtD,QAAAA,EACAkF,UAAW,GACXC,kBAAmBC,EAAiBA,kBAACC,MACrCnE,IAAKkC,EAAKlC,MACV,KAAA,IARIpF,EAAEiI,EAAAxI,MASL+J,KAAKC,kBAAkBC,OAASC,EAAgBA,iBAACrC,EAAK1B,UAAU,GACnEnE,EAAI1F,KAAKiE,GAAIiI,EAAAhJ,KAAA,GAAA,MAAA,KAAA,GACJ,SAAUqI,EACnB7F,EAAI1F,KAAKuL,GAGTY,QAAQC,IAAgCb,2BAAAA,GACzC,KAAA,GAAAW,EAAAhJ,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgJ,EAAAhJ,KAAA,GAEcgC,EACZxE,KAAK6E,YACR6C,eAAAA,EAAM5C,WACN4C,EAAM3C,aACNC,GACD,KAAA,GAGC,OARImC,EAAEqE,EAAAxI,KAMRyI,QAAQC,IAC4D,kEAAA1L,KAAKyH,QAAO,IAAIN,GAClFqE,EAAApI,OAAA,SACK+D,GAAE,KAAA,GAAA,IAAA,MAAA,OAAAqE,EAAAnI,OAAA,GAAAqH,EAAA1K,KACV,KAjHe,OAiHf,WAjHe,OAAAyK,EAAA1K,MAAAC,KAAAC,UAAA,CAAA,CAAA,GAAA8H,EAmHT0F,KAAA,SAAKC,GACV,OAAOA,EAAU1N,OAClBoH,CAAA,CAjS2B,GClGxBuG,EAAmB,ICsBE,WAOzB,SAAAC,EAAYrN,GAA4D,IAAAsN,EAAA7N,KANhE8N,OAAS,IAAInC,IAA8B3L,KAC3C+N,WAAa,IAAIpC,IAA4C3L,KAEpDgO,sBAAgB,EAAAhO,KAChBiO,kBAAY,EAG3BjO,KAAKgO,iBAA2C,OAA3BH,EAAGtN,EAAQyN,kBAAgBH,EAAI,wBACpD7N,KAAKiO,aAAe1N,EAAQ0N,YAC9B,CAAC,IAAAlG,EAAA6F,EAAA5F,UA8ByB,OA9BzBD,EAEOmG,YAAA,SAAYjN,GAClB,OAAU,MAAHA,EAAAA,EAAO,cACf8G,EAEDoG,KAAA,SAAKC,GAAqB,IAAA7C,EAAAvL,KACxB,OAAO,IAAIqO,SAAQ,SAACC,EAASC,GAC3BhD,EAAKiD,QAAQ,CAAEJ,QAAAA,EAASE,QAAAA,EAASC,OAAAA,GACnC,KACDxG,EAEDyG,QAAA,SAAQJ,GAAsB,IAAAK,EAAAC,EAAA1O,KACtB2O,EAAW3O,KAAKkO,YAAYE,EAAQnN,KAEpC2N,EAAiCH,OAA5BA,EAAGzO,KAAK8N,OAAO9B,IAAI2C,IAASF,EAAI,GAM3C,GALKzO,KAAK8N,OAAOe,IAAIF,IACnB3O,KAAK8N,OAAOlH,IAAI+H,EAAUC,GAE5BA,EAAMtP,KAAK8O,IAENpO,KAAK+N,WAAWc,IAAIF,GAAW,CAClC,IAAMG,EAAYC,YAChB,WAAA,OAAML,EAAKM,aAAaL,KACxB3O,KAAKiO,cAEPjO,KAAK+N,WAAWnH,IAAI+H,EAAUG,EAChC,GACD/G,EAEaiH,aAAY,WAAA,IAAAC,EAAA/O,EAAAC,IAAAC,MAAlB,SAAAC,EAAmBsO,GAAgB,IAAAO,EAAAC,EAAAL,EAAAM,EAAAC,EAAAC,EAAArO,EAAAsO,EAAAvQ,EAAAC,EAAAF,EAAAyQ,EAAAC,EAAAC,EAAAvO,EAAAC,EAAAuO,EAAAC,EAAAC,EAAApO,EAAAC,EAAAoO,EAAAC,EAAAC,EAAAlO,EAAAC,EAAA,OAAA5B,IAAAsF,MAAA,SAAAlD,GAAA,cAAAA,EAAAoD,KAAApD,EAAAC,MAAA,KAAA,EAQxC,GAPK2M,EAAwCD,OAA5BA,EAAGlP,KAAK8N,OAAO9B,IAAI2C,IAASO,EAAI,GAClDlP,KAAK8N,OAAa,OAACa,IAEbG,EAAY9O,KAAK+N,WAAW/B,IAAI2C,MAEpCsB,aAAanB,GACb9O,KAAK+N,WAAiB,OAACY,IAGG,IAAxBQ,EAAa3I,OAAY,CAAAjE,EAAAC,KAAA,EAAA,KAAA,CAAA,OAAAD,EAAAa,OAAA,UAAA,KAAA,EA2C1B,OA3C0Bb,EAAAoD,KAAA,EAGrByJ,EAAmBD,EAAae,QACpC,SAACC,GAAC,MACmB,aAAnBA,EAAE/B,QAAQgC,QAERf,EAAcF,EAAae,QAC/B,SAACC,GAAC,MACmB,aAAnBA,EAAE/B,QAAQgC,QAERd,EAAmBH,EAAae,QACpC,SAACC,GAAC,MACmB,aAAnBA,EAAE/B,QAAQgC,QAGRnP,EAAmB,eAAb0N,OAA4BjO,EAAYiO,EAE9CY,EAA2B,CAC/BvO,SAAUoO,EAAiBzN,KAAI,SAAAmC,GAAA,IAAGsK,EAAOtK,EAAPsK,QAAO,MAAQ,CAC/C7M,SAAU+C,EAAAA,oBACR8J,EAAQnD,gBACRmD,EAAQlD,cAEVjJ,aAAcmM,EAAQnM,aACtBE,aAAciM,EAAQjM,aACvB,IACDpB,KAAMsO,EAAY1N,KAAI,SAAAiK,GAAA,IAAGwC,EAAOxC,EAAPwC,QAAO,MAAQ,CACtC7M,SAAU+C,EAAAA,oBACR8J,EAAQnD,gBACRmD,EAAQlD,cAEVtJ,QAASwM,EAAQxM,QACjBC,OAAQuM,EAAQvM,OACjB,IACDX,UAAWoO,EAAiB3N,KAAI,SAAAmF,GAAA,IAAGsH,EAAOtH,EAAPsH,QAAO,MAAQ,CAChD7M,SAAU+C,EAAAA,oBACR8J,EAAQnD,gBACRmD,EAAQlD,cAEV1J,aAAc4M,EAAQ5M,aACvB,IACDf,iBAAkBQ,GACnBsB,EAAAC,KAAA,GAEqB7C,EAAU4P,EAAc,CAC5CjN,SAAUtC,KAAKgO,mBACf,KAAA,GAGF,IAAA/O,EAAAC,GALMF,EAAOuD,EAAAS,MAKyBhC,SAASqP,aAAStR,EAAAE,KAAAE,MAA5CsQ,GAA8CD,EAAAzQ,EAAAM,OAAzC,IAAEqQ,EAAMF,EAAA,cACD/P,MACpB2P,EAAiBK,GAAOlB,OAAOmB,GAE/BN,EAAiBK,GAAOnB,QAAQoB,GAKpC,IAAAvO,EAAAjC,EAA8BF,EAAQ8B,KAAKuP,aAASjP,EAAAD,KAAAhC,MAAxCsQ,GAA0CE,EAAAvO,EAAA/B,OAArC,IAAEqQ,EAAMC,EAAA,cACDlQ,MACpB6P,EAAiBG,GAAOlB,OAAOmB,GAE/BJ,EAAiBG,GAAOnB,QAAQoB,GAKpC,IAAAjO,EAAAvC,EAA8BF,EAAQ+B,KAAKsP,aAAS3O,EAAAD,KAAAtC,MAAxCsQ,GAA0CK,EAAApO,EAAArC,OAArC,IAAEqQ,EAAMI,EAAA,cACDrQ,MACpB4P,EAAYI,GAAOlB,OAAOmB,GAE1BL,EAAYI,GAAOnB,QAAQoB,GAE9BnN,EAAAC,KAAA,GAAA,MAAA,KAAA,GAED,IAFCD,EAAAoD,KAAA,GAAApD,EAAA+N,GAAA/N,EAAA,MAAA,GAEDT,EAAA5C,EAAmBiQ,KAAYpN,EAAAD,KAAA3C,MAAhB4C,EAAA1C,MACRkP,OAAMhM,EAAA+N,IACZ,KAAA,GAAA,IAAA,MAAA,OAAA/N,EAAAc,OAAA,GAAAhD,EAAAL,KAAA,CAAA,CAAA,EAAA,KAEJ,KA1FyB,OA0FzB,SA1FyBJ,GAAA,OAAAqP,EAAAlP,MAAAC,KAAAC,UAAA,CAAA,CAAA,GAAA2N,CAAA,CAxCD,GDtBF,CAAmB,CAC1CK,aAAc,MAwEf,SAAAsC,IAAA,OAAAA,EAAArQ,EAAAC,IAAAC,MA7CM,SAAAC,EAILkI,GAC4B,IAAAiI,EAAAC,EAAAC,EAAAvH,EAAA+B,EAAAyF,EAAAC,EAAAC,EAAAC,EAAA7R,EAAAF,EAAAgS,EAAA,OAAA5Q,IAAAsF,MAAA,SAAAlD,GAAA,cAAAA,EAAAoD,KAAApD,EAAAC,MAAA,KAAA,EAQ3B,GANKiO,EAAiC,OAAxBD,EAAGjI,EAAOyI,gBAAcR,EAAI7C,EAAgB+C,EAC1BnI,EAAOhH,SAAS2C,MAAM,IAAK,GAArDiF,EAAQuH,EAAExF,GAAAA,EAAYwF,EAAA,GACvBC,EAAKM,OAAO1I,EAAOtG,cAEnB2O,EAAerI,EAAO2I,IAAsCC,MAChE,SAACC,GAAG,OAAKA,EAAIC,OAAS9I,EAAOtG,gBAEf,CAAAM,EAAAC,KAAA,EAAA,KAAA,CAAA,MACR,IAAI/C,MAAK,0CAA2C8I,EAAOtG,cAAe,KAAA,EAKlF,IAFM4O,EAAUtI,EAAwDuI,KAClEA,EAAuB,GAC7B7R,EAAAC,EAAqB0R,EAAYE,QAAI/R,EAAAE,KAAAE,MACnC2R,EAAKxR,KAAKgS,EAASA,WADVP,EAAMhS,EAAAM,OACYoE,KAAMoN,EAAOE,EAAOM,QAChD,OAAA9O,EAAAa,OAEM,SAAA,IAAIiL,SAAQ,SAACC,EAASC,GAC3BkC,EAAUjC,QAAQ,CAChBJ,QAAS,CACPgC,KAAM,WACNnF,gBAAiB9B,EACjB+B,aAAcA,EACdjJ,aAAc0O,EACdxO,aAAc2O,GAEhB7P,IAAKsH,EAAOgJ,eACZjD,QAAS,SAACoB,GACR,IACE,IAAM8B,EAAUC,EAAAA,UAAUb,EAAYc,QAAQjO,KAAMiM,GACpDpB,EAAQkD,EACT,CAAC,MAAOG,GACPpD,EAAOoD,EACT,CACD,EACDpD,OAAAA,GAEH,KAAC,KAAA,GAAA,IAAA,MAAA,OAAAhM,EAAAc,OAAA,GAAAhD,EACH,MAAAN,MAAAC,KAAAC,UAAA,CAiDA,SAAA2R,IAAA,OAAAA,EAAA1R,EAAAC,IAAAC,MA/CM,SAAAyL,EAILtD,GAA2E,IAAAsJ,EAAApB,EAAAqB,EAAA3I,EAAA+B,EAAA6G,EAAArI,EAAA,OAAAvJ,IAAAsF,MAAA,SAAAsG,GAAA,cAAAA,EAAApG,KAAAoG,EAAAvJ,MAAA,KAAA,EAO1E,GALKiO,EAAiC,OAAxBoB,EAAGtJ,EAAOyI,gBAAca,EAAIlE,EAAgBmE,EAC1BvJ,EAAOhH,SAAS2C,MAAM,IAAK,GAArDiF,EAAQ2I,EAAE5G,GAAAA,EAAY4G,EAAA,GAEvBC,EAAUxJ,EAAO2I,IAAiCC,MACtD,SAACa,GAAC,OAAKA,EAAEX,OAAS9I,EAAO3G,WAEhB,CAAAmK,EAAAvJ,KAAA,EAAA,KAAA,CAAA,MACH,IAAI/C,MAAK,qCAAsC8I,EAAO3G,SAAU,KAAA,EAGb,OAArD8H,EAAoB4H,EAASA,UAACS,EAAOrI,IAAKnB,EAAOmB,KAAIqC,EAAA3I,OAEpD,SAAA,IAAIiL,SAAQ,SAACC,EAASC,GAC3BkC,EAAUjC,QAAQ,CAChBJ,QAAS,CACPgC,KAAM,WACNnF,gBAAiB9B,EACjB+B,aAAcA,EACdtJ,QAAS2G,EAAO3G,QAChBC,OAAQ6H,GAEVzI,IAAKsH,EAAOgJ,eACZjD,QAAS,SAACoB,GACR,IACE,GAAIA,EAAOjM,OAASwO,EAAWA,YAACC,aAE9B,YADA5D,EAAQ,MAGV,GAAIoB,EAAOjM,OAASwO,EAAWA,YAACE,aAC9B,MAAM,IAAI1S,MAA+BiQ,yBAAAA,GAE3C,IACM8B,EAAUC,EAAAA,UAAUM,EAAO1S,MADlBqQ,EACgCrQ,OAC/CiP,EAAQkD,EACT,CAAC,MAAOG,GACPpD,EAAOoD,EACT,CACD,EACDpD,OAAAA,GAEH,KAAC,KAAA,EAAA,IAAA,MAAA,OAAAxC,EAAA1I,OAAA,GAAAwI,EACH,MAAA9L,MAAAC,KAAAC,UAAA,CAuCA,SAAAmS,IAAA,OAAAA,EAAAlS,EAAAC,IAAAC,MArCM,SAAAsK,EAILnC,GACkC,IAAA8J,EAAA5B,EAAA6B,EAAAnJ,EAAA+B,EAAAqH,EAAA,OAAApS,IAAAsF,MAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAAhJ,MAAA,KAAA,EAOjC,GALKiO,EAAiC,OAAxB4B,EAAG9J,EAAOyI,gBAAcqB,EAAI1E,EAAgB2E,EAC1B/J,EAAOhH,SAAS2C,MAAM,IAAK,GAArDiF,EAAQmJ,EAAEpH,GAAAA,EAAYoH,EAAA,GAEvBC,EAAUhK,EAAO2I,IAAsCC,MAC3D,SAACC,GAAG,OAAKA,EAAIC,OAAS9I,EAAO/G,gBAEpB,CAAAgK,EAAAhJ,KAAA,EAAA,KAAA,CAAA,MACH,IAAI/C,MAAK,0CAA2C8I,EAAO/G,cAAe,KAAA,EAAA,OAAAgK,EAAApI,OAG3E,SAAA,IAAIiL,SAAQ,SAACC,EAASC,GAC3BkC,EAAUjC,QAAQ,CAChBJ,QAAS,CACPgC,KAAM,WACNnF,gBAAiB9B,EACjB+B,aAAcA,EACd1J,aAAc+G,EAAO/G,cAEvBP,IAAKsH,EAAOgJ,eACZjD,QAAS,SAACoB,GACR,IACE,IAAM8B,EAAUC,EAASA,UAACc,EAAO9O,KAAMiM,GACvCpB,EAAQkD,EACT,CAAC,MAAOG,GACPpD,EAAOoD,EACT,CACD,EACDpD,OAAAA,GAEH,KAAC,KAAA,EAAA,IAAA,MAAA,OAAA/C,EAAAnI,OAAA,GAAAqH,EACH,MAAA3K,MAAAC,KAAAC,UAAA,sEArIqBuS,SAAY5S,GAAA,OAAA2Q,EAAAxQ,MAAAC,KAAAC,UAAA,kBA+CZwS,SAAO5S,GAAA,OAAA+R,EAAA7R,MAAAC,KAAAC,UAAA,uBAiDPyS,SAAYjO,GAAA,OAAA2N,EAAArS,MAAAC,KAAAC,UAAA"}