import { serializeCV, deserializeCV, tupleCV, uintCV, bufferCV, serializeCVBytes, contractPrincipalCV, stringAsciiCV, ClarityVersion, makeUnsignedContractDeploy, PostConditionMode, makeUnsignedSTXTokenTransfer, makeUnsignedContractCall, deserializeTransaction, ClarityType } from '@stacks/transactions';
import { richFetch, getNodeInfo, encodeAbi, decodeAbi } from 'ts-clarity';
import { STACKS_MAINNET, STACKS_TESTNET } from '@stacks/network';
import { c32addressDecode } from 'c32check';

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function () {
      return o >= r.length ? {
        done: !0
      } : {
        done: !1,
        value: r[o++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

var DEFAULT_STXER_API = 'https://api.stxer.xyz';
function convertResults(rs) {
  var results = [];
  for (var _iterator = _createForOfIteratorHelperLoose(rs), _step; !(_step = _iterator()).done;) {
    var v = _step.value;
    if ('Ok' in v) {
      results.push(deserializeCV(v.Ok));
    } else {
      results.push(new Error(v.Err));
    }
  }
  return results;
}
function batchRead(_x, _x2) {
  return _batchRead.apply(this, arguments);
}
function _batchRead() {
  _batchRead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(reads, options) {
    var _options$stxerApi;
    var ibh, payload, _iterator2, _step2, variable, _iterator3, _step3, map, _iterator4, _step4, ro, url, data, text, rs;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (options === void 0) {
            options = {};
          }
          ibh = reads.index_block_hash == null ? undefined : reads.index_block_hash.startsWith('0x') ? reads.index_block_hash.substring(2) : reads.index_block_hash;
          payload = {
            vars: [],
            maps: [],
            readonly: [],
            tip: ibh
          };
          if (reads.variables != null) {
            for (_iterator2 = _createForOfIteratorHelperLoose(reads.variables); !(_step2 = _iterator2()).done;) {
              variable = _step2.value;
              payload.vars.push([serializeCV(variable.contract), variable.variableName]);
            }
          }
          if (reads.maps != null) {
            for (_iterator3 = _createForOfIteratorHelperLoose(reads.maps); !(_step3 = _iterator3()).done;) {
              map = _step3.value;
              payload.maps.push([serializeCV(map.contract), map.mapName, serializeCV(map.mapKey)]);
            }
          }
          if (reads.readonly != null) {
            for (_iterator4 = _createForOfIteratorHelperLoose(reads.readonly); !(_step4 = _iterator4()).done;) {
              ro = _step4.value;
              payload.readonly.push([serializeCV(ro.contract), ro.functionName].concat(ro.functionArgs.map(function (v) {
                return serializeCV(v);
              })));
            }
          }
          url = ((_options$stxerApi = options.stxerApi) != null ? _options$stxerApi : DEFAULT_STXER_API) + "/sidecar/v2/batch";
          _context.next = 9;
          return fetch(url, {
            method: 'POST',
            body: JSON.stringify(payload),
            headers: {
              'Content-Type': 'application/json'
            }
          });
        case 9:
          data = _context.sent;
          _context.next = 12;
          return data.text();
        case 12:
          text = _context.sent;
          if (!(!text.includes('Ok') && !text.includes('Err'))) {
            _context.next = 15;
            break;
          }
          throw new Error("Requesting batch reads failed: " + text + ", url: " + url + ", payload: " + JSON.stringify(payload));
        case 15:
          rs = JSON.parse(text);
          return _context.abrupt("return", {
            tip: rs.tip,
            vars: convertResults(rs.vars),
            maps: convertResults(rs.maps),
            readonly: convertResults(rs.readonly)
          });
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _batchRead.apply(this, arguments);
}

function runTx(tx) {
  // type 0: run transaction
  return tupleCV({
    type: uintCV(0),
    data: bufferCV(tx.serializeBytes())
  });
}
function runEval(_ref) {
  var contract_id = _ref.contract_id,
    code = _ref.code;
  var _contract_id$split = contract_id.split('.'),
    contract_address = _contract_id$split[0],
    contract_name = _contract_id$split[1];
  // type 1: eval arbitrary code inside a contract
  return tupleCV({
    type: uintCV(1),
    data: bufferCV(serializeCVBytes(tupleCV({
      contract: contractPrincipalCV(contract_address, contract_name),
      code: stringAsciiCV(code)
    })))
  });
}
function runSimulation(_x, _x2, _x3, _x4) {
  return _runSimulation.apply(this, arguments);
}
function _runSimulation() {
  _runSimulation = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(apiEndpoint, block_hash, block_height, txs) {
    var header, heightBytes, view, hashHex, matches, hashBytes, txBytes, totalLength, body, offset, _iterator3, _step4, tx, rs;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          // Convert 'sim-v1' to Uint8Array
          header = new TextEncoder().encode('sim-v1'); // Create 8 bytes for block height
          heightBytes = new Uint8Array(8); // Convert block height to bytes
          view = new DataView(heightBytes.buffer);
          view.setBigUint64(0, BigInt(block_height), false); // false for big-endian
          // Convert block hash to bytes
          hashHex = block_hash.startsWith('0x') ? block_hash.substring(2) : block_hash; // Replace non-null assertion with null check
          matches = hashHex.match(/.{1,2}/g);
          if (matches) {
            _context5.next = 8;
            break;
          }
          throw new Error('Invalid block hash format');
        case 8:
          hashBytes = new Uint8Array(matches.map(function (_byte) {
            return Number.parseInt(_byte, 16);
          })); // Convert transactions to bytes
          txBytes = txs.map(function (t) {
            return 'contract_id' in t && 'code' in t ? runEval(t) : runTx(t);
          }).map(function (t) {
            return serializeCVBytes(t);
          }); // Combine all byte arrays
          totalLength = header.length + heightBytes.length + hashBytes.length + txBytes.reduce(function (acc, curr) {
            return acc + curr.length;
          }, 0);
          body = new Uint8Array(totalLength);
          offset = 0;
          body.set(header, offset);
          offset += header.length;
          body.set(heightBytes, offset);
          offset += heightBytes.length;
          body.set(hashBytes, offset);
          offset += hashBytes.length;
          for (_iterator3 = _createForOfIteratorHelperLoose(txBytes); !(_step4 = _iterator3()).done;) {
            tx = _step4.value;
            body.set(tx, offset);
            offset += tx.length;
          }
          _context5.next = 22;
          return fetch(apiEndpoint, {
            method: 'POST',
            body: body
          }).then(/*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(rs) {
              var response;
              return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                while (1) switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return rs.text();
                  case 2:
                    response = _context4.sent;
                    if (response.startsWith('{')) {
                      _context4.next = 5;
                      break;
                    }
                    throw new Error("failed to submit simulation: " + response);
                  case 5:
                    return _context4.abrupt("return", JSON.parse(response));
                  case 6:
                  case "end":
                    return _context4.stop();
                }
              }, _callee4);
            }));
            return function (_x6) {
              return _ref3.apply(this, arguments);
            };
          }());
        case 22:
          rs = _context5.sent;
          return _context5.abrupt("return", rs.id);
        case 24:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _runSimulation.apply(this, arguments);
}
var SimulationBuilder = /*#__PURE__*/function () {
  function SimulationBuilder(options) {
    var _options$network, _options$apiEndpoint, _options$stacksNodeAP;
    if (options === void 0) {
      options = {};
    }
    this.apiEndpoint = void 0;
    this.stacksNodeAPI = void 0;
    this.network = void 0;
    // biome-ignore lint/style/useNumberNamespace: <explanation>
    this.block = NaN;
    this.sender = '';
    this.steps = [];
    this.network = (_options$network = options.network) != null ? _options$network : 'mainnet';
    var isTestnet = this.network === 'testnet';
    this.apiEndpoint = (_options$apiEndpoint = options.apiEndpoint) != null ? _options$apiEndpoint : isTestnet ? 'https://testnet-api.stxer.xyz' : 'https://api.stxer.xyz';
    this.stacksNodeAPI = (_options$stacksNodeAP = options.stacksNodeAPI) != null ? _options$stacksNodeAP : isTestnet ? 'https://api.testnet.hiro.so' : 'https://api.hiro.so';
  }
  SimulationBuilder["new"] = function _new(options) {
    return new SimulationBuilder(options);
  };
  var _proto = SimulationBuilder.prototype;
  _proto.useBlockHeight = function useBlockHeight(block) {
    this.block = block;
    return this;
  };
  _proto.withSender = function withSender(address) {
    this.sender = address;
    return this;
  };
  _proto.inlineSimulation = function inlineSimulation(simulationId) {
    this.steps.push({
      simulationId: simulationId
    });
    return this;
  };
  _proto.addSTXTransfer = function addSTXTransfer(params) {
    var _params$sender, _params$fee;
    if (params.sender == null && this.sender === '') {
      throw new Error('Please specify a sender with useSender or adding a sender paramenter');
    }
    this.steps.push(_extends({}, params, {
      sender: (_params$sender = params.sender) != null ? _params$sender : this.sender,
      fee: (_params$fee = params.fee) != null ? _params$fee : 0
    }));
    return this;
  };
  _proto.addContractCall = function addContractCall(params) {
    var _params$sender2, _params$fee2;
    if (params.sender == null && this.sender === '') {
      throw new Error('Please specify a sender with useSender or adding a sender paramenter');
    }
    this.steps.push(_extends({}, params, {
      sender: (_params$sender2 = params.sender) != null ? _params$sender2 : this.sender,
      fee: (_params$fee2 = params.fee) != null ? _params$fee2 : 0
    }));
    return this;
  };
  _proto.addContractDeploy = function addContractDeploy(params) {
    var _params$deployer, _params$fee3, _params$clarity_versi;
    if (params.deployer == null && this.sender === '') {
      throw new Error('Please specify a deployer with useSender or adding a deployer paramenter');
    }
    this.steps.push(_extends({}, params, {
      deployer: (_params$deployer = params.deployer) != null ? _params$deployer : this.sender,
      fee: (_params$fee3 = params.fee) != null ? _params$fee3 : 0,
      clarity_version: (_params$clarity_versi = params.clarity_version) != null ? _params$clarity_versi : ClarityVersion.Clarity3
    }));
    return this;
  };
  _proto.addEvalCode = function addEvalCode(inside_contract_id, code) {
    this.steps.push({
      contract_id: inside_contract_id,
      code: code
    });
    return this;
  };
  _proto.addMapRead = function addMapRead(contract_id, map, key) {
    this.steps.push({
      contract_id: contract_id,
      code: "(map-get " + map + " " + key + ")"
    });
    return this;
  };
  _proto.addVarRead = function addVarRead(contract_id, variable) {
    this.steps.push({
      contract_id: contract_id,
      code: "(var-get " + variable + ")"
    });
    return this;
  };
  _proto.getBlockInfo = /*#__PURE__*/function () {
    var _getBlockInfo = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _yield$getNodeInfo, stacks_tip_height, info;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!Number.isNaN(this.block)) {
              _context.next = 6;
              break;
            }
            _context.next = 3;
            return getNodeInfo({
              stacksEndpoint: this.stacksNodeAPI
            });
          case 3:
            _yield$getNodeInfo = _context.sent;
            stacks_tip_height = _yield$getNodeInfo.stacks_tip_height;
            this.block = stacks_tip_height;
          case 6:
            _context.next = 8;
            return richFetch(this.stacksNodeAPI + "/extended/v1/block/by_height/" + this.block + "?unanchored=true").then(function (r) {
              return r.json();
            });
          case 8:
            info = _context.sent;
            if (!(info.height !== this.block || typeof info.hash !== 'string' || !info.hash.startsWith('0x'))) {
              _context.next = 11;
              break;
            }
            throw new Error("failed to get block info for block height " + this.block);
          case 11:
            return _context.abrupt("return", {
              block_height: this.block,
              block_hash: info.hash.substring(2),
              index_block_hash: info.index_block_hash.substring(2)
            });
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function getBlockInfo() {
      return _getBlockInfo.apply(this, arguments);
    }
    return getBlockInfo;
  }();
  _proto.run = /*#__PURE__*/function () {
    var _run = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var _this = this;
      var block, txs, nonce_by_address, nextNonce, network, _iterator, _step, step, previousSimulation, _iterator2, _step2, _step3, _step$function_args, nonce, _step$contract_id$spl, contractAddress, contractName, tx, _nonce, _tx, _nonce2, _tx2, id;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            console.log("--------------------------------\nThis product can never exist without your support!\n\nWe receive sponsorship funds with:\nSP212Y5JKN59YP3GYG07K3S8W5SSGE4KH6B5STXER\n\nFeedbacks and feature requests are welcome.\nTo get in touch: contact@stxer.xyz\n--------------------------------");
            _context3.next = 3;
            return this.getBlockInfo();
          case 3:
            block = _context3.sent;
            console.log("Using block height " + block.block_height + " hash 0x" + block.block_hash + " to run simulation.");
            txs = [];
            nonce_by_address = new Map();
            nextNonce = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(sender) {
                var nonce, url, account;
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      nonce = nonce_by_address.get(sender);
                      if (!(nonce == null)) {
                        _context2.next = 8;
                        break;
                      }
                      url = _this.stacksNodeAPI + "/v2/accounts/" + sender + "?proof=" + false + "&tip=" + block.index_block_hash;
                      _context2.next = 5;
                      return richFetch(url).then(function (r) {
                        return r.json();
                      });
                    case 5:
                      account = _context2.sent;
                      nonce_by_address.set(sender, account.nonce + 1);
                      return _context2.abrupt("return", account.nonce);
                    case 8:
                      nonce_by_address.set(sender, nonce + 1);
                      return _context2.abrupt("return", nonce);
                    case 10:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }));
              return function nextNonce(_x5) {
                return _ref2.apply(this, arguments);
              };
            }();
            network = this.network === 'mainnet' ? STACKS_MAINNET : STACKS_TESTNET;
            if (this.stacksNodeAPI) {
              network = _extends({}, network, {
                client: _extends({}, network.client, {
                  baseUrl: this.stacksNodeAPI
                })
              });
            }
            _iterator = _createForOfIteratorHelperLoose(this.steps);
          case 11:
            if ((_step = _iterator()).done) {
              _context3.next = 57;
              break;
            }
            step = _step.value;
            if (!('simulationId' in step)) {
              _context3.next = 20;
              break;
            }
            _context3.next = 16;
            return fetch("https://api.stxer.xyz/simulations/" + step.simulationId + "/request").then(function (x) {
              return x.json();
            });
          case 16:
            previousSimulation = _context3.sent;
            for (_iterator2 = _createForOfIteratorHelperLoose(previousSimulation.steps); !(_step2 = _iterator2()).done;) {
              _step3 = _step2.value;
              if ('tx' in _step3) {
                txs.push(deserializeTransaction(_step3.tx));
              } else if ('code' in _step3 && 'contract' in _step3) {
                txs.push({
                  contract_id: _step3.contract,
                  code: _step3.code
                });
              }
            }
            _context3.next = 55;
            break;
          case 20:
            if (!('sender' in step && 'function_name' in step)) {
              _context3.next = 32;
              break;
            }
            _context3.next = 23;
            return nextNonce(step.sender);
          case 23:
            nonce = _context3.sent;
            _step$contract_id$spl = step.contract_id.split('.'), contractAddress = _step$contract_id$spl[0], contractName = _step$contract_id$spl[1];
            _context3.next = 27;
            return makeUnsignedContractCall({
              contractAddress: contractAddress,
              contractName: contractName,
              functionName: step.function_name,
              functionArgs: (_step$function_args = step.function_args) != null ? _step$function_args : [],
              nonce: nonce,
              network: network,
              publicKey: '',
              postConditionMode: PostConditionMode.Allow,
              fee: step.fee
            });
          case 27:
            tx = _context3.sent;
            tx.auth.spendingCondition.signer = c32addressDecode(step.sender)[1];
            txs.push(tx);
            _context3.next = 55;
            break;
          case 32:
            if (!('sender' in step && 'recipient' in step)) {
              _context3.next = 43;
              break;
            }
            _context3.next = 35;
            return nextNonce(step.sender);
          case 35:
            _nonce = _context3.sent;
            _context3.next = 38;
            return makeUnsignedSTXTokenTransfer({
              recipient: step.recipient,
              amount: step.amount,
              nonce: _nonce,
              network: network,
              publicKey: '',
              fee: step.fee
            });
          case 38:
            _tx = _context3.sent;
            _tx.auth.spendingCondition.signer = c32addressDecode(step.sender)[1];
            txs.push(_tx);
            _context3.next = 55;
            break;
          case 43:
            if (!('deployer' in step)) {
              _context3.next = 54;
              break;
            }
            _context3.next = 46;
            return nextNonce(step.deployer);
          case 46:
            _nonce2 = _context3.sent;
            _context3.next = 49;
            return makeUnsignedContractDeploy({
              contractName: step.contract_name,
              codeBody: step.source_code,
              nonce: _nonce2,
              network: network,
              publicKey: '',
              postConditionMode: PostConditionMode.Allow,
              fee: step.fee
            });
          case 49:
            _tx2 = _context3.sent;
            _tx2.auth.spendingCondition.signer = c32addressDecode(step.deployer)[1];
            txs.push(_tx2);
            _context3.next = 55;
            break;
          case 54:
            if ('code' in step) {
              txs.push(step);
            } else {
              // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
              console.log("Invalid simulation step:", step);
            }
          case 55:
            _context3.next = 11;
            break;
          case 57:
            _context3.next = 59;
            return runSimulation(this.apiEndpoint + "/simulations", block.block_hash, block.block_height, txs);
          case 59:
            id = _context3.sent;
            console.log("Simulation will be available at: https://stxer.xyz/simulations/" + this.network + "/" + id);
            return _context3.abrupt("return", id);
          case 62:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    function run() {
      return _run.apply(this, arguments);
    }
    return run;
  }();
  _proto.pipe = function pipe(transform) {
    return transform(this);
  };
  return SimulationBuilder;
}();

var BatchProcessor = /*#__PURE__*/function () {
  function BatchProcessor(options) {
    var _options$stxerAPIEndp;
    this.queues = new Map();
    this.timeoutIds = new Map();
    this.stxerAPIEndpoint = void 0;
    this.batchDelayMs = void 0;
    this.stxerAPIEndpoint = (_options$stxerAPIEndp = options.stxerAPIEndpoint) != null ? _options$stxerAPIEndp : 'https://api.stxer.xyz';
    this.batchDelayMs = options.batchDelayMs;
  }
  var _proto = BatchProcessor.prototype;
  _proto.getQueueKey = function getQueueKey(tip) {
    return tip != null ? tip : '_undefined';
  };
  _proto.read = function read(request) {
    var _this = this;
    return new Promise(function (resolve, reject) {
      _this.enqueue({
        request: request,
        resolve: resolve,
        reject: reject
      });
    });
  };
  _proto.enqueue = function enqueue(request) {
    var _this$queues$get,
      _this2 = this;
    var queueKey = this.getQueueKey(request.tip);
    var queue = (_this$queues$get = this.queues.get(queueKey)) != null ? _this$queues$get : [];
    if (!this.queues.has(queueKey)) {
      this.queues.set(queueKey, queue);
    }
    queue.push(request);
    if (!this.timeoutIds.has(queueKey)) {
      var timeoutId = setTimeout(function () {
        return _this2.processBatch(queueKey);
      }, this.batchDelayMs);
      this.timeoutIds.set(queueKey, timeoutId);
    }
  };
  _proto.processBatch = /*#__PURE__*/function () {
    var _processBatch = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(queueKey) {
      var _this$queues$get2;
      var currentQueue, timeoutId, readonlyRequests, mapRequests, variableRequests, tip, batchRequest, results, _iterator, _step, _step$value, index, result, _iterator2, _step2, _step2$value, _index, _result, _iterator3, _step3, _step3$value, _index2, _result2, _iterator4, _step4, item;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            currentQueue = (_this$queues$get2 = this.queues.get(queueKey)) != null ? _this$queues$get2 : [];
            this.queues["delete"](queueKey);
            timeoutId = this.timeoutIds.get(queueKey);
            if (timeoutId) {
              clearTimeout(timeoutId);
              this.timeoutIds["delete"](queueKey);
            }
            if (!(currentQueue.length === 0)) {
              _context.next = 6;
              break;
            }
            return _context.abrupt("return");
          case 6:
            _context.prev = 6;
            readonlyRequests = currentQueue.filter(function (q) {
              return q.request.mode === 'readonly';
            });
            mapRequests = currentQueue.filter(function (q) {
              return q.request.mode === 'mapEntry';
            });
            variableRequests = currentQueue.filter(function (q) {
              return q.request.mode === 'variable';
            });
            tip = queueKey === '_undefined' ? undefined : queueKey;
            batchRequest = {
              readonly: readonlyRequests.map(function (_ref) {
                var request = _ref.request;
                return {
                  contract: contractPrincipalCV(request.contractAddress, request.contractName),
                  functionName: request.functionName,
                  functionArgs: request.functionArgs
                };
              }),
              maps: mapRequests.map(function (_ref2) {
                var request = _ref2.request;
                return {
                  contract: contractPrincipalCV(request.contractAddress, request.contractName),
                  mapName: request.mapName,
                  mapKey: request.mapKey
                };
              }),
              variables: variableRequests.map(function (_ref3) {
                var request = _ref3.request;
                return {
                  contract: contractPrincipalCV(request.contractAddress, request.contractName),
                  variableName: request.variableName
                };
              }),
              index_block_hash: tip
            };
            _context.next = 14;
            return batchRead(batchRequest, {
              stxerApi: this.stxerAPIEndpoint
            });
          case 14:
            results = _context.sent;
            // Handle readonly results
            for (_iterator = _createForOfIteratorHelperLoose(results.readonly.entries()); !(_step = _iterator()).done;) {
              _step$value = _step.value, index = _step$value[0], result = _step$value[1];
              if (result instanceof Error) {
                readonlyRequests[index].reject(result);
              } else {
                readonlyRequests[index].resolve(result);
              }
            }
            // Handle variable results
            for (_iterator2 = _createForOfIteratorHelperLoose(results.vars.entries()); !(_step2 = _iterator2()).done;) {
              _step2$value = _step2.value, _index = _step2$value[0], _result = _step2$value[1];
              if (_result instanceof Error) {
                variableRequests[_index].reject(_result);
              } else {
                variableRequests[_index].resolve(_result);
              }
            }
            // Handle map results
            for (_iterator3 = _createForOfIteratorHelperLoose(results.maps.entries()); !(_step3 = _iterator3()).done;) {
              _step3$value = _step3.value, _index2 = _step3$value[0], _result2 = _step3$value[1];
              if (_result2 instanceof Error) {
                mapRequests[_index2].reject(_result2);
              } else {
                mapRequests[_index2].resolve(_result2);
              }
            }
            _context.next = 23;
            break;
          case 20:
            _context.prev = 20;
            _context.t0 = _context["catch"](6);
            for (_iterator4 = _createForOfIteratorHelperLoose(currentQueue); !(_step4 = _iterator4()).done;) {
              item = _step4.value;
              item.reject(_context.t0);
            }
          case 23:
          case "end":
            return _context.stop();
        }
      }, _callee, this, [[6, 20]]);
    }));
    function processBatch(_x) {
      return _processBatch.apply(this, arguments);
    }
    return processBatch;
  }();
  return BatchProcessor;
}();

// Shared processor instance with default settings
var defaultProcessor = /*#__PURE__*/new BatchProcessor({
  batchDelayMs: 100
});
function callReadonly(_x) {
  return _callReadonly.apply(this, arguments);
}
function _callReadonly() {
  _callReadonly = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {
    var _params$batchProcesso;
    var processor, _params$contract$spli, deployer, contractName, fn, functionDef, argsKV, args, _iterator, _step, argDef;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          processor = (_params$batchProcesso = params.batchProcessor) != null ? _params$batchProcesso : defaultProcessor;
          _params$contract$spli = params.contract.split('.', 2), deployer = _params$contract$spli[0], contractName = _params$contract$spli[1];
          fn = String(params.functionName);
          functionDef = params.abi.find(function (def) {
            return def.name === params.functionName;
          });
          if (functionDef) {
            _context.next = 6;
            break;
          }
          throw new Error("failed to find function definition for " + params.functionName);
        case 6:
          argsKV = params.args;
          args = [];
          for (_iterator = _createForOfIteratorHelperLoose(functionDef.args); !(_step = _iterator()).done;) {
            argDef = _step.value;
            args.push(encodeAbi(argDef.type, argsKV[argDef.name]));
          }
          return _context.abrupt("return", new Promise(function (_resolve, reject) {
            processor.enqueue({
              request: {
                mode: 'readonly',
                contractAddress: deployer,
                contractName: contractName,
                functionName: fn,
                functionArgs: args
              },
              tip: params.indexBlockHash,
              resolve: function resolve(result) {
                try {
                  var decoded = decodeAbi(functionDef.outputs.type, result);
                  _resolve(decoded);
                } catch (error) {
                  reject(error);
                }
              },
              reject: reject
            });
          }));
        case 10:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _callReadonly.apply(this, arguments);
}
function readMap(_x2) {
  return _readMap.apply(this, arguments);
}
function _readMap() {
  _readMap = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
    var _params$batchProcesso2;
    var processor, _params$contract$spli2, deployer, contractName, mapDef, key;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          processor = (_params$batchProcesso2 = params.batchProcessor) != null ? _params$batchProcesso2 : defaultProcessor;
          _params$contract$spli2 = params.contract.split('.', 2), deployer = _params$contract$spli2[0], contractName = _params$contract$spli2[1];
          mapDef = params.abi.find(function (m) {
            return m.name === params.mapName;
          });
          if (mapDef) {
            _context2.next = 5;
            break;
          }
          throw new Error("failed to find map definition for " + params.mapName);
        case 5:
          key = encodeAbi(mapDef.key, params.key);
          return _context2.abrupt("return", new Promise(function (_resolve2, reject) {
            processor.enqueue({
              request: {
                mode: 'mapEntry',
                contractAddress: deployer,
                contractName: contractName,
                mapName: params.mapName,
                mapKey: key
              },
              tip: params.indexBlockHash,
              resolve: function resolve(result) {
                try {
                  if (result.type === ClarityType.OptionalNone) {
                    _resolve2(null);
                    return;
                  }
                  if (result.type !== ClarityType.OptionalSome) {
                    throw new Error("unexpected map value: " + result);
                  }
                  var someCV = result;
                  var decoded = decodeAbi(mapDef.value, someCV.value);
                  _resolve2(decoded);
                } catch (error) {
                  reject(error);
                }
              },
              reject: reject
            });
          }));
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _readMap.apply(this, arguments);
}
function readVariable(_x3) {
  return _readVariable.apply(this, arguments);
}
function _readVariable() {
  _readVariable = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {
    var _params$batchProcesso3;
    var processor, _params$contract$spli3, deployer, contractName, varDef;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          processor = (_params$batchProcesso3 = params.batchProcessor) != null ? _params$batchProcesso3 : defaultProcessor;
          _params$contract$spli3 = params.contract.split('.', 2), deployer = _params$contract$spli3[0], contractName = _params$contract$spli3[1];
          varDef = params.abi.find(function (def) {
            return def.name === params.variableName;
          });
          if (varDef) {
            _context3.next = 5;
            break;
          }
          throw new Error("failed to find variable definition for " + params.variableName);
        case 5:
          return _context3.abrupt("return", new Promise(function (_resolve3, reject) {
            processor.enqueue({
              request: {
                mode: 'variable',
                contractAddress: deployer,
                contractName: contractName,
                variableName: params.variableName
              },
              tip: params.indexBlockHash,
              resolve: function resolve(result) {
                try {
                  var decoded = decodeAbi(varDef.type, result);
                  _resolve3(decoded);
                } catch (error) {
                  reject(error);
                }
              },
              reject: reject
            });
          }));
        case 6:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _readVariable.apply(this, arguments);
}

export { SimulationBuilder, batchRead, callReadonly, readMap, readVariable, runEval, runSimulation };
//# sourceMappingURL=stxer.esm.js.map
