{"version":3,"file":"stxer.esm.js","sources":["../src/BatchAPI.ts","../src/simulation.ts","../src/BatchProcessor.ts","../src/clarity-api.ts"],"sourcesContent":["/**\n * WARNING:\n *\n * this file will be used in cross-runtime environments (browser, cloudflare workers, XLinkSDK, etc.),\n * so please be careful when adding `import`s to it.\n */\n\nimport {\n  type ClarityValue,\n  type ContractPrincipalCV,\n  deserializeCV,\n  serializeCV,\n} from '@stacks/transactions';\n\nexport interface BatchReads {\n  variables?: {\n    contract: ContractPrincipalCV;\n    variableName: string;\n  }[];\n  maps?: {\n    contract: ContractPrincipalCV;\n    mapName: string;\n    mapKey: ClarityValue;\n  }[];\n  readonly?: {\n    contract: ContractPrincipalCV;\n    functionName: string;\n    functionArgs: ClarityValue[];\n  }[];\n  index_block_hash?: string;\n}\n\nexport interface BatchReadsResult {\n  tip: string;\n  vars: (ClarityValue | Error)[];\n  maps: (ClarityValue | Error)[];\n  readonly: (ClarityValue | Error)[];\n}\n\nexport interface BatchApiOptions {\n  stxerApi?: string;\n}\n\nconst DEFAULT_STXER_API = 'https://api.stxer.xyz';\n\nfunction convertResults(\n  rs: ({ Ok: string } | { Err: string })[],\n): (ClarityValue | Error)[] {\n  const results: (ClarityValue | Error)[] = [];\n  for (const v of rs) {\n    if ('Ok' in v) {\n      results.push(deserializeCV(v.Ok));\n    } else {\n      results.push(new Error(v.Err));\n    }\n  }\n  return results;\n}\n\nexport async function batchRead(\n  reads: BatchReads,\n  options: BatchApiOptions = {}\n): Promise<BatchReadsResult> {\n  const ibh =\n    reads.index_block_hash == null\n      ? undefined\n      : reads.index_block_hash.startsWith('0x')\n        ? reads.index_block_hash.substring(2)\n        : reads.index_block_hash;\n\n  const payload: {\n    tip?: string;\n    vars: string[][];\n    maps: string[][];\n    readonly: string[][];\n  } = { vars: [], maps: [], readonly: [], tip: ibh };\n\n  if (reads.variables != null) {\n    for (const variable of reads.variables) {\n      payload.vars.push([serializeCV(variable.contract), variable.variableName]);\n    }\n  }\n\n  if (reads.maps != null) {\n    for (const map of reads.maps) {\n      payload.maps.push([\n        serializeCV(map.contract),\n        map.mapName,\n        serializeCV(map.mapKey),\n      ]);\n    }\n  }\n\n  if (reads.readonly != null) {\n    for (const ro of reads.readonly) {\n      payload.readonly.push([\n        serializeCV(ro.contract),\n        ro.functionName,\n        ...ro.functionArgs.map(v => serializeCV(v)),\n      ]);\n    }\n  }\n\n  const url = `${options.stxerApi ?? DEFAULT_STXER_API}/sidecar/v2/batch`;\n  const data = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(payload),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  const text = await data.text();\n  if (!text.includes('Ok') && !text.includes('Err')) {\n    throw new Error(\n      `Requesting batch reads failed: ${text}, url: ${url}, payload: ${JSON.stringify(\n        payload,\n      )}`,\n    );\n  }\n\n  const rs = JSON.parse(text) as {\n    tip: string;\n    vars: ({ Ok: string } | { Err: string })[];\n    maps: ({ Ok: string } | { Err: string })[];\n    readonly: ({ Ok: string } | { Err: string })[];\n  };\n\n  return {\n    tip: rs.tip,\n    vars: convertResults(rs.vars),\n    maps: convertResults(rs.maps),\n    readonly: convertResults(rs.readonly),\n  };\n}","import { type AccountDataResponse, getNodeInfo, richFetch } from 'ts-clarity';\nimport type { Block } from '@stacks/stacks-blockchain-api-types';\nimport {\n  STACKS_MAINNET,\n  STACKS_TESTNET,\n  type StacksNetworkName,\n} from '@stacks/network';\nimport {\n  type ClarityValue,\n  ClarityVersion,\n  PostConditionMode,\n  type StacksTransactionWire,\n  bufferCV,\n  contractPrincipalCV,\n  deserializeTransaction,\n  makeUnsignedContractCall,\n  makeUnsignedContractDeploy,\n  makeUnsignedSTXTokenTransfer,\n  serializeCVBytes,\n  stringAsciiCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport { c32addressDecode } from 'c32check';\n\nfunction runTx(tx: StacksTransactionWire) {\n  // type 0: run transaction\n  return tupleCV({ type: uintCV(0), data: bufferCV(tx.serializeBytes()) });\n}\n\nexport interface SimulationEval {\n  contract_id: string;\n  code: string;\n}\n\nexport function runEval({ contract_id, code }: SimulationEval) {\n  const [contract_address, contract_name] = contract_id.split('.');\n  // type 1: eval arbitrary code inside a contract\n  return tupleCV({\n    type: uintCV(1),\n    data: bufferCV(\n      serializeCVBytes(\n        tupleCV({\n          contract: contractPrincipalCV(contract_address, contract_name),\n          code: stringAsciiCV(code),\n        })\n      )\n    ),\n  });\n}\n\nexport async function runSimulation(\n  apiEndpoint: string,\n  block_hash: string,\n  block_height: number,\n  txs: (StacksTransactionWire | SimulationEval)[]\n) {\n  // Convert 'sim-v1' to Uint8Array\n  const header = new TextEncoder().encode('sim-v1');\n  // Create 8 bytes for block height\n  const heightBytes = new Uint8Array(8);\n  // Convert block height to bytes\n  const view = new DataView(heightBytes.buffer);\n  view.setBigUint64(0, BigInt(block_height), false); // false for big-endian\n\n  // Convert block hash to bytes\n  const hashHex = block_hash.startsWith('0x')\n    ? block_hash.substring(2)\n    : block_hash;\n  // Replace non-null assertion with null check\n  const matches = hashHex.match(/.{1,2}/g);\n  if (!matches) {\n    throw new Error('Invalid block hash format');\n  }\n  const hashBytes = new Uint8Array(\n    matches.map((byte) => Number.parseInt(byte, 16))\n  );\n\n  // Convert transactions to bytes\n  const txBytes = txs\n    .map((t) => ('contract_id' in t && 'code' in t ? runEval(t) : runTx(t)))\n    .map((t) => serializeCVBytes(t));\n\n  // Combine all byte arrays\n  const totalLength =\n    header.length +\n    heightBytes.length +\n    hashBytes.length +\n    txBytes.reduce((acc, curr) => acc + curr.length, 0);\n  const body = new Uint8Array(totalLength);\n\n  let offset = 0;\n  body.set(header, offset);\n  offset += header.length;\n  body.set(heightBytes, offset);\n  offset += heightBytes.length;\n  body.set(hashBytes, offset);\n  offset += hashBytes.length;\n  for (const tx of txBytes) {\n    body.set(tx, offset);\n    offset += tx.length;\n  }\n\n  const rs = await fetch(apiEndpoint, {\n    method: 'POST',\n    body,\n  }).then(async (rs) => {\n    const response = await rs.text();\n    if (!response.startsWith('{')) {\n      throw new Error(`failed to submit simulation: ${response}`);\n    }\n    return JSON.parse(response) as { id: string };\n  });\n  return rs.id;\n}\n\ninterface SimulationBuilderOptions {\n  apiEndpoint?: string;\n  stacksNodeAPI?: string;\n  network?: StacksNetworkName | string;\n}\n\nexport class SimulationBuilder {\n  private apiEndpoint: string;\n  private stacksNodeAPI: string;\n  private network: StacksNetworkName | string;\n\n  private constructor(options: SimulationBuilderOptions = {}) {\n    this.network = options.network ?? 'mainnet';\n    const isTestnet = this.network === 'testnet';\n    \n    this.apiEndpoint = options.apiEndpoint ?? \n      (isTestnet ? 'https://testnet-api.stxer.xyz' : 'https://api.stxer.xyz');\n    this.stacksNodeAPI = options.stacksNodeAPI ?? \n      (isTestnet ? 'https://api.testnet.hiro.so' : 'https://api.hiro.so');\n  }\n\n  public static new(options?: SimulationBuilderOptions) {\n    return new SimulationBuilder(options);\n  }\n\n  // biome-ignore lint/style/useNumberNamespace: <explanation>\n  private block = NaN;\n  private sender = '';\n  private steps: (\n    | {\n      // inline simulation\n      simulationId: string;\n    }\n    | {\n      // contract call\n      contract_id: string;\n      function_name: string;\n      function_args?: ClarityValue[];\n      sender: string;\n      fee: number;\n    }\n    | {\n      // contract deploy\n      contract_name: string;\n      source_code: string;\n      deployer: string;\n      fee: number;\n      clarity_version: ClarityVersion;\n    }\n    | {\n      // STX transfer\n      recipient: string;\n      amount: number;\n      sender: string;\n      fee: number;\n    }\n    | SimulationEval\n  )[] = [];\n\n  public useBlockHeight(block: number) {\n    this.block = block;\n    return this;\n  }\n  public withSender(address: string) {\n    this.sender = address;\n    return this;\n  }\n  public inlineSimulation(simulationId: string) {\n    this.steps.push({\n      simulationId,\n    })\n    return this;\n  }\n  public addSTXTransfer(params: {\n    recipient: string;\n    amount: number;\n    sender?: string;\n    fee?: number;\n  }) {\n    if (params.sender == null && this.sender === '') {\n      throw new Error(\n        'Please specify a sender with useSender or adding a sender paramenter'\n      );\n    }\n    this.steps.push({\n      ...params,\n      sender: params.sender ?? this.sender,\n      fee: params.fee ?? 0,\n    });\n    return this;\n  }\n  public addContractCall(params: {\n    contract_id: string;\n    function_name: string;\n    function_args?: ClarityValue[];\n    sender?: string;\n    fee?: number;\n  }) {\n    if (params.sender == null && this.sender === '') {\n      throw new Error(\n        'Please specify a sender with useSender or adding a sender paramenter'\n      );\n    }\n    this.steps.push({\n      ...params,\n      sender: params.sender ?? this.sender,\n      fee: params.fee ?? 0,\n    });\n    return this;\n  }\n  public addContractDeploy(params: {\n    contract_name: string;\n    source_code: string;\n    deployer?: string;\n    fee?: number;\n    clarity_version?: ClarityVersion;\n  }) {\n    if (params.deployer == null && this.sender === '') {\n      throw new Error(\n        'Please specify a deployer with useSender or adding a deployer paramenter'\n      );\n    }\n    this.steps.push({\n      ...params,\n      deployer: params.deployer ?? this.sender,\n      fee: params.fee ?? 0,\n      clarity_version: params.clarity_version ?? ClarityVersion.Clarity3,\n    });\n    return this;\n  }\n  public addEvalCode(inside_contract_id: string, code: string) {\n    this.steps.push({\n      contract_id: inside_contract_id,\n      code,\n    });\n    return this;\n  }\n  public addMapRead(contract_id: string, map: string, key: string) {\n    this.steps.push({\n      contract_id,\n      code: `(map-get ${map} ${key})`,\n    });\n    return this;\n  }\n  public addVarRead(contract_id: string, variable: string) {\n    this.steps.push({\n      contract_id,\n      code: `(var-get ${variable})`,\n    });\n    return this;\n  }\n\n  private async getBlockInfo() {\n    if (Number.isNaN(this.block)) {\n      const { stacks_tip_height } = await getNodeInfo({\n        stacksEndpoint: this.stacksNodeAPI,\n      });\n      this.block = stacks_tip_height;\n    }\n    const info: Block = await richFetch(\n      `${this.stacksNodeAPI}/extended/v1/block/by_height/${this.block}?unanchored=true`\n    ).then((r) => r.json());\n    if (\n      info.height !== this.block ||\n      typeof info.hash !== 'string' ||\n      !info.hash.startsWith('0x')\n    ) {\n      throw new Error(\n        `failed to get block info for block height ${this.block}`\n      );\n    }\n    return {\n      block_height: this.block,\n      block_hash: info.hash.substring(2),\n      index_block_hash: info.index_block_hash.substring(2),\n    };\n  }\n\n  public async run() {\n    console.log(\n      `--------------------------------\nThis product can never exist without your support!\n\nWe receive sponsorship funds with:\nSP212Y5JKN59YP3GYG07K3S8W5SSGE4KH6B5STXER\n\nFeedbacks and feature requests are welcome.\nTo get in touch: contact@stxer.xyz\n--------------------------------`\n    );\n    const block = await this.getBlockInfo();\n    console.log(\n      `Using block height ${block.block_height} hash 0x${block.block_hash} to run simulation.`\n    );\n    const txs: (StacksTransactionWire | SimulationEval)[] = [];\n    const nonce_by_address = new Map<string, number>();\n    const nextNonce = async (sender: string) => {\n      const nonce = nonce_by_address.get(sender);\n      if (nonce == null) {\n        const url = `${this.stacksNodeAPI\n          }/v2/accounts/${sender}?proof=${false}&tip=${block.index_block_hash}`;\n        const account: AccountDataResponse = await richFetch(url).then((r) =>\n          r.json()\n        );\n        nonce_by_address.set(sender, account.nonce + 1);\n        return account.nonce;\n      }\n      nonce_by_address.set(sender, nonce + 1);\n      return nonce;\n    };\n    let network = this.network === 'mainnet' ? STACKS_MAINNET : STACKS_TESTNET;\n    if (this.stacksNodeAPI) {\n      network = {\n        ...network,\n        client: {\n          ...network.client,\n          baseUrl: this.stacksNodeAPI,\n        },\n      };\n    }\n    for (const step of this.steps) {\n      if ('simulationId' in step) {\n        const previousSimulation: {steps: ({tx: string} | {code: string, contract: string})[]} = await fetch(`https://api.stxer.xyz/simulations/${step.simulationId}/request`).then(x => x.json())\n        for (const step of previousSimulation.steps) {\n          if ('tx' in step) {\n            txs.push(deserializeTransaction(step.tx));\n          } else if ('code' in step && 'contract' in step) {\n            txs.push({\n              contract_id: step.contract,\n              code: step.code,\n            });\n          }\n        }\n      } else if ('sender' in step && 'function_name' in step) {\n        const nonce = await nextNonce(step.sender);\n        const [contractAddress, contractName] = step.contract_id.split('.');\n        const tx = await makeUnsignedContractCall({\n          contractAddress,\n          contractName,\n          functionName: step.function_name,\n          functionArgs: step.function_args ?? [],\n          nonce,\n          network,\n          publicKey: '',\n          postConditionMode: PostConditionMode.Allow,\n          fee: step.fee,\n        });\n        tx.auth.spendingCondition.signer = c32addressDecode(step.sender)[1];\n        txs.push(tx);\n      } else if ('sender' in step && 'recipient' in step) {\n        const nonce = await nextNonce(step.sender);\n        const tx = await makeUnsignedSTXTokenTransfer({\n          recipient: step.recipient,\n          amount: step.amount,\n          nonce,\n          network,\n          publicKey: '',\n          fee: step.fee,\n        });\n        tx.auth.spendingCondition.signer = c32addressDecode(step.sender)[1];\n        txs.push(tx);\n      } else if ('deployer' in step) {\n        const nonce = await nextNonce(step.deployer);\n        const tx = await makeUnsignedContractDeploy({\n          contractName: step.contract_name,\n          codeBody: step.source_code,\n          nonce,\n          network,\n          publicKey: '',\n          postConditionMode: PostConditionMode.Allow,\n          fee: step.fee,\n        });\n        tx.auth.spendingCondition.signer = c32addressDecode(step.deployer)[1];\n        txs.push(tx);\n      } else if ('code' in step) {\n        txs.push(step);\n      } else {\n        // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>\n        console.log(`Invalid simulation step:`, step);\n      }\n    }\n    const id = await runSimulation(\n      `${this.apiEndpoint}/simulations`,\n      block.block_hash,\n      block.block_height,\n      txs\n    );\n    console.log(\n      `Simulation will be available at: https://stxer.xyz/simulations/${this.network}/${id}`\n    );\n    return id;\n  }\n\n  public pipe(transform: (builder: SimulationBuilder) => SimulationBuilder): SimulationBuilder {\n    return transform(this);\n  }\n}\n","/**\n * WARNING:\n *\n * this file will be used in cross-runtime environments (browser, cloudflare workers, XLinkSDK, etc.),\n * so please be careful when adding `import`s to it.\n */\n\nimport {\n  type ClarityValue,\n  type OptionalCV,\n  contractPrincipalCV,\n} from '@stacks/transactions';\nimport { type BatchReads, batchRead } from './BatchAPI';\n\nexport interface ReadOnlyRequest {\n  mode: 'readonly';\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n}\n\nexport interface MapEntryRequest {\n  mode: 'mapEntry';\n  contractAddress: string;\n  contractName: string;\n  mapName: string;\n  mapKey: ClarityValue;\n}\n\nexport interface VariableRequest {\n  mode: 'variable';\n  contractAddress: string;\n  contractName: string;\n  variableName: string;\n}\n\nexport type BatchRequest = MapEntryRequest | VariableRequest | ReadOnlyRequest;\n\nexport interface QueuedRequest {\n  request: BatchRequest;\n  tip?: string;\n  resolve: (value: ClarityValue | OptionalCV) => void;\n  reject: (error: Error) => void;\n}\n\nexport class BatchProcessor {\n  private queues = new Map<string, QueuedRequest[]>();\n  private timeoutIds = new Map<string, ReturnType<typeof setTimeout>>();\n\n  private readonly stxerAPIEndpoint: string;\n  private readonly batchDelayMs: number;\n\n  constructor(options: { stxerAPIEndpoint?: string; batchDelayMs: number }) {\n    this.stxerAPIEndpoint = options.stxerAPIEndpoint ?? 'https://api.stxer.xyz';\n    this.batchDelayMs = options.batchDelayMs;\n  }\n\n  private getQueueKey(tip?: string): string {\n    return tip ?? '_undefined';\n  }\n\n  read(request: BatchRequest): Promise<ClarityValue | OptionalCV> {\n    return new Promise((resolve, reject) => {\n      this.enqueue({ request, resolve, reject });\n    });\n  }\n\n  enqueue(request: QueuedRequest): void {\n    const queueKey = this.getQueueKey(request.tip);\n\n    const queue = this.queues.get(queueKey) ?? [];\n    if (!this.queues.has(queueKey)) {\n      this.queues.set(queueKey, queue);\n    }\n    queue.push(request);\n\n    if (!this.timeoutIds.has(queueKey)) {\n      const timeoutId = setTimeout(\n        () => this.processBatch(queueKey),\n        this.batchDelayMs,\n      );\n      this.timeoutIds.set(queueKey, timeoutId);\n    }\n  }\n\n  private async processBatch(queueKey: string): Promise<void> {\n    const currentQueue = this.queues.get(queueKey) ?? [];\n    this.queues.delete(queueKey);\n\n    const timeoutId = this.timeoutIds.get(queueKey);\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      this.timeoutIds.delete(queueKey);\n    }\n\n    if (currentQueue.length === 0) return;\n\n    try {\n      const readonlyRequests = currentQueue.filter(\n        (q): q is QueuedRequest & { request: ReadOnlyRequest } =>\n          q.request.mode === 'readonly',\n      );\n      const mapRequests = currentQueue.filter(\n        (q): q is QueuedRequest & { request: MapEntryRequest } =>\n          q.request.mode === 'mapEntry',\n      );\n      const variableRequests = currentQueue.filter(\n        (q): q is QueuedRequest & { request: VariableRequest } =>\n          q.request.mode === 'variable',\n      );\n\n      const tip = queueKey === '_undefined' ? undefined : queueKey;\n\n      const batchRequest: BatchReads = {\n        readonly: readonlyRequests.map(({ request }) => ({\n          contract: contractPrincipalCV(\n            request.contractAddress,\n            request.contractName,\n          ),\n          functionName: request.functionName,\n          functionArgs: request.functionArgs,\n        })),\n        maps: mapRequests.map(({ request }) => ({\n          contract: contractPrincipalCV(\n            request.contractAddress,\n            request.contractName,\n          ),\n          mapName: request.mapName,\n          mapKey: request.mapKey,\n        })),\n        variables: variableRequests.map(({ request }) => ({\n          contract: contractPrincipalCV(\n            request.contractAddress,\n            request.contractName,\n          ),\n          variableName: request.variableName,\n        })),\n        index_block_hash: tip,\n      };\n\n      const results = await batchRead(batchRequest, {\n        stxerApi: this.stxerAPIEndpoint,\n      });\n\n      // Handle readonly results\n      for (const [index, result] of results.readonly.entries()) {\n        if (result instanceof Error) {\n          readonlyRequests[index].reject(result);\n        } else {\n          readonlyRequests[index].resolve(result);\n        }\n      }\n\n      // Handle variable results\n      for (const [index, result] of results.vars.entries()) {\n        if (result instanceof Error) {\n          variableRequests[index].reject(result);\n        } else {\n          variableRequests[index].resolve(result);\n        }\n      }\n\n      // Handle map results\n      for (const [index, result] of results.maps.entries()) {\n        if (result instanceof Error) {\n          mapRequests[index].reject(result);\n        } else {\n          mapRequests[index].resolve(result);\n        }\n      }\n    } catch (error) {\n      for (const item of currentQueue) {\n        item.reject(error as Error);\n      }\n    }\n  }\n} ","import {\n  ClarityType,\n  type ClarityValue,\n  type OptionalCV,\n} from '@stacks/transactions';\nimport type {\n  ClarityAbiFunction,\n  ClarityAbiMap,\n  ClarityAbiVariable,\n  TContractPrincipal,\n  TPrincipal,\n} from 'clarity-abi';\nimport { decodeAbi, encodeAbi } from 'ts-clarity';\nimport type {\n  InferReadonlyCallParameterType,\n  InferReadonlyCallResultType,\n  InferMapValueType,\n  InferReadMapParameterType,\n  InferReadVariableParameterType,\n  InferVariableType,\n} from 'ts-clarity';\nimport { BatchProcessor } from './BatchProcessor';\n\n// Shared processor instance with default settings\nconst defaultProcessor = new BatchProcessor({\n  batchDelayMs: 100,\n});\n\nexport type ReadonlyCallRuntimeOptions = {\n  sender?: TPrincipal;\n  contract: TContractPrincipal;\n  stacksEndpoint?: string;\n  indexBlockHash?: string;\n  batchProcessor?: BatchProcessor;\n};\n\nexport type ReadMapRuntimeParameters = {\n  contract: TContractPrincipal;\n  stacksEndpoint?: string;\n  proof?: boolean;\n  indexBlockHash?: string;\n  batchProcessor?: BatchProcessor;\n};\n\nexport type ReadVariableRuntimeParameterType = {\n  contract: TContractPrincipal;\n  stacksEndpoint?: string;\n  proof?: boolean;\n  indexBlockHash?: string;\n  batchProcessor?: BatchProcessor;\n};\n\nexport async function callReadonly<\n  Functions extends readonly ClarityAbiFunction[] | readonly unknown[],\n  FunctionName extends string,\n>(\n  params: InferReadonlyCallParameterType<Functions, FunctionName> &\n    ReadonlyCallRuntimeOptions,\n): Promise<InferReadonlyCallResultType<Functions, FunctionName>> {\n  const processor = params.batchProcessor ?? defaultProcessor;\n  const [deployer, contractName] = params.contract.split('.', 2);\n  const fn = String(params.functionName);\n  \n  const functionDef = (params.abi as readonly ClarityAbiFunction[]).find(\n    (def) => def.name === params.functionName,\n  );\n  if (!functionDef) {\n    throw new Error(`failed to find function definition for ${params.functionName}`);\n  }\n  \n  const argsKV = (params as unknown as { args: Record<string, unknown> }).args;\n  const args: ClarityValue[] = [];\n  for (const argDef of functionDef.args) {\n    args.push(encodeAbi(argDef.type, argsKV[argDef.name]));\n  }\n\n  return new Promise((resolve, reject) => {\n    processor.enqueue({\n      request: {\n        mode: 'readonly',\n        contractAddress: deployer,\n        contractName: contractName,\n        functionName: fn,\n        functionArgs: args,\n      },\n      tip: params.indexBlockHash,\n      resolve: (result: ClarityValue | OptionalCV) => {\n        try {\n          const decoded = decodeAbi(functionDef.outputs.type, result);\n          resolve(decoded as InferReadonlyCallResultType<Functions, FunctionName>);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      reject,\n    });\n  });\n}\n\nexport async function readMap<\n  Maps extends readonly ClarityAbiMap[] | readonly unknown[] = readonly ClarityAbiMap[],\n  MapName extends string = string,\n>(\n  params: InferReadMapParameterType<Maps, MapName> & ReadMapRuntimeParameters,\n): Promise<InferMapValueType<Maps, MapName> | null> {\n  const processor = params.batchProcessor ?? defaultProcessor;\n  const [deployer, contractName] = params.contract.split('.', 2);\n  \n  const mapDef = (params.abi as readonly ClarityAbiMap[]).find(\n    (m) => m.name === params.mapName,\n  );\n  if (!mapDef) {\n    throw new Error(`failed to find map definition for ${params.mapName}`);\n  }\n  \n  const key: ClarityValue = encodeAbi(mapDef.key, params.key);\n\n  return new Promise((resolve, reject) => {\n    processor.enqueue({\n      request: {\n        mode: 'mapEntry',\n        contractAddress: deployer,\n        contractName: contractName,\n        mapName: params.mapName,\n        mapKey: key,\n      },\n      tip: params.indexBlockHash,\n      resolve: (result: ClarityValue | OptionalCV) => {\n        try {\n          if (result.type === ClarityType.OptionalNone) {\n            resolve(null);\n            return;\n          }\n          if (result.type !== ClarityType.OptionalSome) {\n            throw new Error(`unexpected map value: ${result}`);\n          }\n          const someCV = result as { type: ClarityType.OptionalSome; value: ClarityValue };\n          const decoded = decodeAbi(mapDef.value, someCV.value);\n          resolve(decoded as InferMapValueType<Maps, MapName>);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      reject,\n    });\n  });\n}\n\nexport async function readVariable<\n  Variables extends readonly ClarityAbiVariable[] | readonly unknown[] = readonly ClarityAbiVariable[],\n  VariableName extends string = string,\n>(\n  params: InferReadVariableParameterType<Variables, VariableName> &\n    ReadVariableRuntimeParameterType,\n): Promise<InferVariableType<Variables, VariableName>> {\n  const processor = params.batchProcessor ?? defaultProcessor;\n  const [deployer, contractName] = params.contract.split('.', 2);\n  \n  const varDef = (params.abi as readonly ClarityAbiVariable[]).find(\n    (def) => def.name === params.variableName,\n  );\n  if (!varDef) {\n    throw new Error(`failed to find variable definition for ${params.variableName}`);\n  }\n\n  return new Promise((resolve, reject) => {\n    processor.enqueue({\n      request: {\n        mode: 'variable',\n        contractAddress: deployer,\n        contractName: contractName,\n        variableName: params.variableName,\n      },\n      tip: params.indexBlockHash,\n      resolve: (result: ClarityValue | OptionalCV) => {\n        try {\n          const decoded = decodeAbi(varDef.type, result);\n          resolve(decoded as InferVariableType<Variables, VariableName>);\n        } catch (error) {\n          reject(error);\n        }\n      },\n      reject,\n    });\n  });\n}"],"names":["DEFAULT_STXER_API","convertResults","rs","results","_iterator","_createForOfIteratorHelperLoose","_step","done","v","value","push","deserializeCV","Ok","Error","Err","batchRead","_x","_x2","_batchRead","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reads","options","ibh","index_block_hash","undefined","startsWith","substring","payload","vars","maps","readonly","tip","variables","_iterator2","_step2","variable","serializeCV","contract","variableName","_iterator3","_step3","map","mapName","mapKey","_iterator4","_step4","ro","functionName","concat","functionArgs","url","_options$stxerApi","stxerApi","_context","next","fetch","method","body","JSON","stringify","headers","data","sent","text","includes","parse","abrupt","stop","runTx","tx","tupleCV","type","uintCV","bufferCV","serializeBytes","runEval","_ref","contract_id","code","_contract_id$split","split","contract_address","contract_name","serializeCVBytes","contractPrincipalCV","stringAsciiCV","runSimulation","_x3","_x4","_runSimulation","_callee5","apiEndpoint","block_hash","block_height","txs","header","heightBytes","view","hashHex","matches","hashBytes","txBytes","totalLength","offset","wrap","_callee5$","_context5","prev","TextEncoder","encode","Uint8Array","DataView","buffer","setBigUint64","BigInt","match","byte","Number","parseInt","t","length","reduce","acc","curr","set","then","_ref3","_callee4","response","_callee4$","_context4","_x6","id","SimulationBuilder","_options$network","_options$apiEndpoint","_options$stacksNodeAP","stacksNodeAPI","network","block","NaN","sender","steps","isTestnet","new","_proto","prototype","useBlockHeight","withSender","address","inlineSimulation","simulationId","addSTXTransfer","params","_params$sender","_params$fee","_extends","fee","addContractCall","_params$sender2","_params$fee2","addContractDeploy","_params$deployer","_params$fee3","_params$clarity_versi","deployer","clarity_version","ClarityVersion","Clarity3","addEvalCode","inside_contract_id","addMapRead","key","addVarRead","getBlockInfo","_getBlockInfo","_yield$getNodeInfo","stacks_tip_height","info","_callee$","isNaN","getNodeInfo","stacksEndpoint","richFetch","r","json","height","hash","run","_run","_callee3","_this","nonce_by_address","nextNonce","step","previousSimulation","_step$function_args","nonce","_step$contract_id$spl","contractAddress","contractName","_nonce","_tx","_nonce2","_tx2","_callee3$","_context3","console","log","Map","_ref2","_callee2","account","_callee2$","_context2","get","_x5","STACKS_MAINNET","STACKS_TESTNET","client","baseUrl","x","deserializeTransaction","makeUnsignedContractCall","function_name","function_args","publicKey","postConditionMode","PostConditionMode","Allow","auth","spendingCondition","signer","c32addressDecode","makeUnsignedSTXTokenTransfer","recipient","amount","makeUnsignedContractDeploy","codeBody","source_code","pipe","transform","BatchProcessor","_options$stxerAPIEndp","queues","timeoutIds","stxerAPIEndpoint","batchDelayMs","getQueueKey","read","request","Promise","resolve","reject","enqueue","_this$queues$get","_this2","queueKey","queue","has","timeoutId","setTimeout","processBatch","_processBatch","_this$queues$get2","currentQueue","readonlyRequests","mapRequests","variableRequests","batchRequest","_step$value","index","result","_step2$value","_index","_result","_step3$value","_index2","_result2","item","clearTimeout","filter","q","mode","entries","t0","defaultProcessor","callReadonly","_callReadonly","_params$batchProcesso","processor","_params$contract$spli","fn","functionDef","argsKV","args","argDef","batchProcessor","String","abi","find","def","name","encodeAbi","indexBlockHash","decoded","decodeAbi","outputs","error","readMap","_readMap","_params$batchProcesso2","_params$contract$spli2","mapDef","m","ClarityType","OptionalNone","OptionalSome","someCV","readVariable","_readVariable","_params$batchProcesso3","_params$contract$spli3","varDef"],"mappings":"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"}