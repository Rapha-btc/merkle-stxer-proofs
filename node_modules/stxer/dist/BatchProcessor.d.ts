/**
 * WARNING:
 *
 * this file will be used in cross-runtime environments (browser, cloudflare workers, XLinkSDK, etc.),
 * so please be careful when adding `import`s to it.
 */
import { type ClarityValue, type OptionalCV } from '@stacks/transactions';
export interface ReadOnlyRequest {
    mode: 'readonly';
    contractAddress: string;
    contractName: string;
    functionName: string;
    functionArgs: ClarityValue[];
}
export interface MapEntryRequest {
    mode: 'mapEntry';
    contractAddress: string;
    contractName: string;
    mapName: string;
    mapKey: ClarityValue;
}
export interface VariableRequest {
    mode: 'variable';
    contractAddress: string;
    contractName: string;
    variableName: string;
}
export type BatchRequest = MapEntryRequest | VariableRequest | ReadOnlyRequest;
export interface QueuedRequest {
    request: BatchRequest;
    tip?: string;
    resolve: (value: ClarityValue | OptionalCV) => void;
    reject: (error: Error) => void;
}
export declare class BatchProcessor {
    private queues;
    private timeoutIds;
    private readonly stxerAPIEndpoint;
    private readonly batchDelayMs;
    constructor(options: {
        stxerAPIEndpoint?: string;
        batchDelayMs: number;
    });
    private getQueueKey;
    read(request: BatchRequest): Promise<ClarityValue | OptionalCV>;
    enqueue(request: QueuedRequest): void;
    private processBatch;
}
