import type { ClarityAbiFunction, ClarityAbiMap, ClarityAbiVariable, TContractPrincipal, TPrincipal } from 'clarity-abi';
import type { InferReadonlyCallParameterType, InferReadonlyCallResultType, InferMapValueType, InferReadMapParameterType, InferReadVariableParameterType, InferVariableType } from 'ts-clarity';
import { BatchProcessor } from './BatchProcessor';
export type ReadonlyCallRuntimeOptions = {
    sender?: TPrincipal;
    contract: TContractPrincipal;
    stacksEndpoint?: string;
    indexBlockHash?: string;
    batchProcessor?: BatchProcessor;
};
export type ReadMapRuntimeParameters = {
    contract: TContractPrincipal;
    stacksEndpoint?: string;
    proof?: boolean;
    indexBlockHash?: string;
    batchProcessor?: BatchProcessor;
};
export type ReadVariableRuntimeParameterType = {
    contract: TContractPrincipal;
    stacksEndpoint?: string;
    proof?: boolean;
    indexBlockHash?: string;
    batchProcessor?: BatchProcessor;
};
export declare function callReadonly<Functions extends readonly ClarityAbiFunction[] | readonly unknown[], FunctionName extends string>(params: InferReadonlyCallParameterType<Functions, FunctionName> & ReadonlyCallRuntimeOptions): Promise<InferReadonlyCallResultType<Functions, FunctionName>>;
export declare function readMap<Maps extends readonly ClarityAbiMap[] | readonly unknown[] = readonly ClarityAbiMap[], MapName extends string = string>(params: InferReadMapParameterType<Maps, MapName> & ReadMapRuntimeParameters): Promise<InferMapValueType<Maps, MapName> | null>;
export declare function readVariable<Variables extends readonly ClarityAbiVariable[] | readonly unknown[] = readonly ClarityAbiVariable[], VariableName extends string = string>(params: InferReadVariableParameterType<Variables, VariableName> & ReadVariableRuntimeParameterType): Promise<InferVariableType<Variables, VariableName>>;
