import { type StacksNetworkName } from '@stacks/network';
import { type ClarityValue, ClarityVersion, type StacksTransactionWire } from '@stacks/transactions';
export interface SimulationEval {
    contract_id: string;
    code: string;
}
export declare function runEval({ contract_id, code }: SimulationEval): import("@stacks/transactions").TupleCV<import("@stacks/transactions").TupleData<import("@stacks/transactions").BufferCV | import("@stacks/transactions").UIntCV>>;
export declare function runSimulation(apiEndpoint: string, block_hash: string, block_height: number, txs: (StacksTransactionWire | SimulationEval)[]): Promise<string>;
interface SimulationBuilderOptions {
    apiEndpoint?: string;
    stacksNodeAPI?: string;
    network?: StacksNetworkName | string;
}
export declare class SimulationBuilder {
    private apiEndpoint;
    private stacksNodeAPI;
    private network;
    private constructor();
    static new(options?: SimulationBuilderOptions): SimulationBuilder;
    private block;
    private sender;
    private steps;
    useBlockHeight(block: number): this;
    withSender(address: string): this;
    inlineSimulation(simulationId: string): this;
    addSTXTransfer(params: {
        recipient: string;
        amount: number;
        sender?: string;
        fee?: number;
    }): this;
    addContractCall(params: {
        contract_id: string;
        function_name: string;
        function_args?: ClarityValue[];
        sender?: string;
        fee?: number;
    }): this;
    addContractDeploy(params: {
        contract_name: string;
        source_code: string;
        deployer?: string;
        fee?: number;
        clarity_version?: ClarityVersion;
    }): this;
    addEvalCode(inside_contract_id: string, code: string): this;
    addMapRead(contract_id: string, map: string, key: string): this;
    addVarRead(contract_id: string, variable: string): this;
    private getBlockInfo;
    run(): Promise<string>;
    pipe(transform: (builder: SimulationBuilder) => SimulationBuilder): SimulationBuilder;
}
export {};
