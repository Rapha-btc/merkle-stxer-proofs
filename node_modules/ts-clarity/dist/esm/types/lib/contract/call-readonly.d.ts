import type { ClarityAbiFunction, HexString, TContractPrincipal, TPrincipal } from 'clarity-abi';
import { type RequestTimeoutRetryParams } from '../common/fetch.js';
import type { InferReadonlyCallParameterType, InferReadonlyCallResultType } from './contract.js';
export type ReadonlyCallRuntimeOptions = {
    sender?: TPrincipal;
    contract: TContractPrincipal;
    stacksEndpoint?: string;
    indexBlockHash?: HexString | Uint8Array;
} & Omit<RequestTimeoutRetryParams, 'retryOn'>;
export declare function callReadonly<Functions extends readonly ClarityAbiFunction[] | readonly unknown[], FunctionName extends string>(params: InferReadonlyCallParameterType<Functions, FunctionName> & ReadonlyCallRuntimeOptions): Promise<InferReadonlyCallResultType<Functions, FunctionName>>;
export declare function unwrapResponse<T>(response: {
    type: 'success';
    value: T;
} | {
    type: 'error';
    error: unknown;
}): T;
//# sourceMappingURL=call-readonly.d.ts.map