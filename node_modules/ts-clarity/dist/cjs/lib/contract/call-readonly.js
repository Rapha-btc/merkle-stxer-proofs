"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callReadonly = callReadonly;
exports.unwrapResponse = unwrapResponse;
const transactions_1 = require("@stacks/transactions");
const assert_js_1 = require("../common/assert.js");
const constants_js_1 = require("../common/constants.js");
const fetch_js_1 = require("../common/fetch.js");
const buffer_js_1 = require("../utils/buffer.js");
const abi_codec_js_1 = require("./abi-codec.js");
const constants_js_2 = require("./constants.js");
async function callReadonly(params) {
    const stacksEndpoint = params.stacksEndpoint ?? constants_js_2.kDefaultStacksEndpoint;
    const urlParams = new URLSearchParams();
    if (typeof params.indexBlockHash === 'string') {
        urlParams.set('tip', params.indexBlockHash.substring(2).toLowerCase());
    }
    else if (params.indexBlockHash instanceof Uint8Array) {
        urlParams.set('tip', (0, buffer_js_1.fromUint8Array)(params.indexBlockHash).toString('hex'));
    }
    const [deployer, contractName] = params.contract.split('.', 2);
    const fn = String(params.functionName);
    const args = [];
    const functionDef = params.abi.find((def) => def.name === params.functionName);
    (0, assert_js_1.assert)(functionDef != null, `failed to find function definition for ${params.functionName}`);
    const argsKV = params.args;
    for (const argDef of functionDef.args) {
        args.push((0, abi_codec_js_1.encodeAbi)(argDef.type, argsKV[argDef.name]));
    }
    const url = `${stacksEndpoint}/v2/contracts/call-read/${deployer}/${contractName}/${fn}?${urlParams.toString()}`;
    const body = JSON.stringify({
        sender: params.sender ?? deployer,
        arguments: args.map(transactions_1.cvToHex),
    });
    const funcResponse = await (0, fetch_js_1.richFetch)(url, {
        method: 'POST',
        body,
        headers: { 'Content-Type': 'application/json' },
        fetch: params.fetch,
        timeout: params.timeout ?? constants_js_1.kDefaultStacksTimeout,
        retries: params.retries ?? constants_js_1.kDefaultStacksReadRetries,
        retryDelay: params.retryDelay ?? (0, fetch_js_1.exponentialBackoff)(),
        retryOn: fetch_js_1.retryOnError,
    });
    if (funcResponse.status !== 200) {
        throw new Error(`Readonly call failed with http code ${funcResponse.status}: ${funcResponse.statusText}`);
    }
    const funcResult = await funcResponse.json();
    if (funcResult.okay !== true) {
        throw new Error(`Readonly call failed with error: ${funcResult.cause}`);
    }
    const result = (0, transactions_1.deserializeCV)(funcResult.result);
    return (0, abi_codec_js_1.decodeAbi)(functionDef.outputs.type, result);
}
function unwrapResponse(response) {
    if (response.type === 'success') {
        return response.value;
    }
    throw new Error(`Clarity ResponseErr: ${response.error}`);
}
//# sourceMappingURL=call-readonly.js.map