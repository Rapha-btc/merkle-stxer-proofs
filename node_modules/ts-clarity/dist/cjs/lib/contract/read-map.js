"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readMap = readMap;
const transactions_1 = require("@stacks/transactions");
const assert_js_1 = require("../common/assert.js");
const constants_js_1 = require("../common/constants.js");
const fetch_js_1 = require("../common/fetch.js");
const buffer_js_1 = require("../utils/buffer.js");
const abi_codec_js_1 = require("./abi-codec.js");
const constants_js_2 = require("./constants.js");
async function readMap(params) {
    const { stacksEndpoint, proof, indexBlockHash, contract, mapName } = params;
    const mapDef = params.abi.find((m) => m.name === params.mapName);
    (0, assert_js_1.assert)(mapDef != null, `failed to find map definition for ${params.mapName}`);
    const urlParams = new URLSearchParams();
    urlParams.set('proof', proof === true ? '1' : '0');
    if (typeof indexBlockHash === 'string') {
        urlParams.set('tip', indexBlockHash.substring(2).toLowerCase());
    }
    else if (indexBlockHash instanceof Uint8Array) {
        urlParams.set('tip', (0, buffer_js_1.fromUint8Array)(indexBlockHash).toString('hex'));
    }
    const [deployer, contractName] = contract.split('.', 2);
    const key = (0, abi_codec_js_1.encodeAbi)(mapDef.key, params.key);
    const url = `${stacksEndpoint ?? constants_js_2.kDefaultStacksEndpoint}/v2/map_entry/${deployer}/${contractName}/${mapName}?${urlParams.toString()}`;
    const funcResponse = await (0, fetch_js_1.richFetch)(url, {
        method: 'POST',
        body: `"${(0, transactions_1.cvToHex)(key)}"`,
        headers: { 'Content-Type': 'application/json' },
        fetch: params.fetch,
        timeout: params.timeout ?? constants_js_1.kDefaultStacksTimeout,
        retries: params.retries ?? constants_js_1.kDefaultStacksReadRetries,
        retryDelay: params.retryDelay ?? (0, fetch_js_1.exponentialBackoff)(),
        retryOn: fetch_js_1.retryOnError,
    });
    if (funcResponse.status !== 200) {
        throw new Error(`Read contract map failed with http code ${funcResponse.status}: ${funcResponse.statusText}`);
    }
    const mapResult = await funcResponse.json();
    const result = (0, transactions_1.deserializeCV)(mapResult.data);
    if (result.type === transactions_1.ClarityType.OptionalNone)
        return null;
    (0, assert_js_1.assert)(result.type === transactions_1.ClarityType.OptionalSome, `unexpected map value: ${result}`);
    return (0, abi_codec_js_1.decodeAbi)(mapDef.value, result.value);
}
//# sourceMappingURL=read-map.js.map