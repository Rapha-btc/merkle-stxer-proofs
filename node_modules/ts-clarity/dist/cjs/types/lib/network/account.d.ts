import type { TPrincipal } from 'clarity-abi';
import { type RequestOptions } from './request.js';
export type AccountDataResponse = {
    balance: bigint;
    locked: bigint;
    unlock_height: number;
    nonce: number;
    balance_proof: string;
    nonce_proof: string;
};
export declare function getAccountInfo<T extends {
    proof?: boolean;
}>(address: TPrincipal, _options?: RequestOptions & T): Promise<T extends {
    proof: true;
} ? AccountDataResponse : Omit<AccountDataResponse, 'balance_proof' | 'nonce_proof'>>;
export interface AddressNonces {
    last_mempool_tx_nonce: number;
    last_executed_tx_nonce: number;
    possible_next_nonce: number;
    detected_missing_nonces: number[];
    detected_mempool_nonces?: number[];
}
export declare function getAccountNonces(address: string, _options?: RequestOptions): Promise<AddressNonces>;
export interface FtBalance {
    balance: bigint;
    total_sent: bigint;
    total_received: bigint;
}
export interface NftBalance {
    count: bigint;
    total_sent: bigint;
    total_received: bigint;
}
export interface AddressUnlockSchedule {
    amount: bigint;
    block_height: number;
}
export interface AddressTokenOfferingLocked {
    total_locked: bigint;
    total_unlocked: bigint;
    unlock_schedule: AddressUnlockSchedule[];
}
export interface AccountBalances {
    stx: {
        balance: bigint;
        total_sent: bigint;
        total_received: bigint;
        total_fees_sent: bigint;
        total_miner_rewards_received: bigint;
        lock_tx_id: string;
        locked: bigint;
        lock_height: number;
        burnchain_lock_height: number;
        burnchain_unlock_height: number;
    };
    fungible_tokens: Record<string, FtBalance>;
    non_fungible_tokens: Record<string, NftBalance>;
    token_offering_locked?: AddressTokenOfferingLocked;
}
export declare function getAccountBalances(address: string, _options?: RequestOptions): Promise<AccountBalances>;
//# sourceMappingURL=account.d.ts.map