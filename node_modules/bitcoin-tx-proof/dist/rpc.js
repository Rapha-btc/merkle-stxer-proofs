"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinRPC = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_rate_limit_1 = __importDefault(require("axios-rate-limit"));
const node_cache_1 = __importDefault(require("node-cache"));
const DEBUG = process.env.DEBUG === 'true';
function debug(...args) {
    if (DEBUG) {
        console.log('\x1b[35m[RPC]\x1b[0m', ...args); // Magenta color for RPC logs
    }
}
class BitcoinRPC {
    constructor(config) {
        this.url = config.url;
        if (config.username && config.password) {
            this.auth = {
                username: config.username,
                password: config.password
            };
        }
        this.cache = new node_cache_1.default({ stdTTL: 600 }); // 10 minute cache
        this.axiosInstance = (0, axios_rate_limit_1.default)(axios_1.default.create(), {
            maxRequests: 10,
            perMilliseconds: 1000
        });
    }
    async call(method, params = []) {
        const cacheKey = `${method}-${JSON.stringify(params)}`;
        const cached = this.cache.get(cacheKey);
        if (cached) {
            debug('Cache hit for:', method, params);
            return cached;
        }
        debug('Making RPC call:', method, params);
        try {
            const response = await this.axiosInstance.post(this.url, {
                jsonrpc: '2.0',
                id: 'bitcointxproof',
                method,
                params
            }, {
                auth: this.auth,
                headers: { 'Content-Type': 'application/json' }
            });
            debug('RPC response:', response.data);
            if (response.data.error) {
                throw new Error(`RPC Error: ${response.data.error.message}`);
            }
            this.cache.set(cacheKey, response.data.result);
            return response.data.result;
        }
        catch (error) {
            if (axios_1.default.isAxiosError(error)) {
                const axiosError = error;
                if (axiosError.response) {
                    debug('RPC Error Response:', {
                        status: axiosError.response.status,
                        statusText: axiosError.response.statusText,
                        data: axiosError.response.data
                    });
                    throw new Error(`RPC Error (${axiosError.response.status}): ${JSON.stringify(axiosError.response.data)}`);
                }
                else if (axiosError.request) {
                    debug('RPC Request Error:', axiosError.message);
                    throw new Error(`RPC Request Failed: ${axiosError.message}`);
                }
            }
            debug('Unexpected RPC Error:', error);
            throw error;
        }
    }
}
exports.BitcoinRPC = BitcoinRPC;
